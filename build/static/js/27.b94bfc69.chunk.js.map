{"version":3,"sources":["commons/components/Modal/index.js","commons/components/Card/CardItem.js","commons/components/Card/index.js","modules/main/components/VitualData/index.js","modules/main/components/WeeklyElectric/index.js","modules/main/components/InfoReality/InfoRealityItem.js","modules/main/components/InfoReality/index.js","modules/main/components/TotalPower/TotalPowerItem.js","modules/main/components/TotalPower/index.js","commons/components/Search/AutoSuggest.js","commons/components/Search/index.js","customHooks/useDebounce.js","modules/main/components/Dashboard/index.js"],"names":["ModalPopup","title","children","animation","isOpen","size","handleClose","customClass","isShowIconClose","isShowHeader","isShowFooter","isShowTwoBtn","customClassButton","classNameBtnLeft","textBtnLeft","classNameBtnRight","textBtnRight","handleSubmit","isDisabledButton","handleCloseIcon","onHide","show","className","onClick","role","tabIndex","onKeyUp","src","images","icon_close","alt","Body","Footer","type","isDisabled","defaultProps","memo","CardItem","name","specifications","unit","formatNumber","Card","isLogoTop","listCompany","logoClick","titleClick","isCardCompany","isEvent","amountElectricDay","amountElectricMonth","electricRealtime","ratePower","cumulativeElectric","logo","IMAGES","icon_event_card","map","item","key","id","com_logo_path","thumbnail","VitualData","radiance","temperature","motion_weather_blue","motion_weather_orange","WeeklyElectric","measure","dataChart","dataSource","argumentField","wordWrap","overlappingBehavior","visible","InfoRealityItem","subName","value","InfoReality","outputVoltage","outputCurrent","TotalPowerItem","icon","TotalPower","icon_day","icon_month","icon_plus","AutoSuggest","options","option","index","label","Search","placeholder","handleIconClick","onChange","setSearchTerm","handleKeyDown","isSpinner","useState","display","setDisplay","wrapperRef","useRef","inputRef","handleClickOutside","event","wrap","current","contains","target","useEffect","window","addEventListener","removeEventListener","ref","onKeyPress","e","icon_search","length","search","searchValue","console","log","focus","useDebounce","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","MainPage","dispatch","useDispatch","history","useHistory","useSelector","state","main","optionsCompany","optionsPosition","listPositions","cardPositionMain","isLoading","totalMetric","userInfo","account","searchTerm","isShow","content","modal","setModal","typeSearch","setTypeSearch","labelMatric","setLabelMatric","debouncedSearchTerm","getCompanySearchMain","keyword","getPositionSearchMain","totalInfo","data","chart","getListPosition","getListCompany","count","getCardMeasureMain","pos_id","getTotalMetric","interval","setInterval","clearInterval","com_id","handleLogoClick","push","ROUTERS","STATUS_COMPANY","setCompanyId","searchSubmit","getCardMeasureSearchPosition","getCardMeasureSearchCompany","renderPositionActive","posItem","position","icon_location_on","style","top","pos_map_y","left","pos_map_x","Loading","roles","icon_title","prod_today","prod_inmonth","prod_sum","output_voltage","output_current","prod_realtime","performance_ratio","icon_location","posY","posX","pos_name","company","card","DASHBOARD_AREA","setPositionId","Modal"],"mappings":"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","file":"static/js/27.b94bfc69.chunk.js","sourcesContent":["/* eslint-disable no-nested-ternary */\r\n// @flow\r\n// libs\r\nimport React, { memo } from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport Button from 'commons/components/Button';\r\nimport images from 'themes/images';\r\n\r\ntype Props = {\r\n  title?: string,\r\n  children: any,\r\n  animation?: boolean,\r\n  isOpen: boolean,\r\n  size?: string,\r\n  handleClose: Function,\r\n  customClass?: string,\r\n  isShowIconClose?: boolean,\r\n  isShowHeader?: boolean,\r\n  isShowFooter?: boolean,\r\n  isShowTwoBtn?: boolean,\r\n  customClassButton?: string,\r\n  classNameBtnLeft?: string,\r\n  textBtnLeft?: string,\r\n  classNameBtnRight?: string,\r\n  textBtnRight?: string,\r\n  handleSubmit?: Function,\r\n  isDisabledButton?: boolean,\r\n  handleCloseIcon?: Function,\r\n};\r\n\r\nexport const ModalPopup = ({\r\n  title = '',\r\n  children,\r\n  animation = false,\r\n  isOpen,\r\n  size,\r\n  handleClose,\r\n  customClass,\r\n  isShowIconClose,\r\n  isShowHeader,\r\n  isShowFooter,\r\n  isShowTwoBtn,\r\n  customClassButton = '',\r\n  classNameBtnLeft = '',\r\n  textBtnLeft = '',\r\n  classNameBtnRight = '',\r\n  textBtnRight = 'OK',\r\n  handleSubmit = () => {},\r\n  isDisabledButton,\r\n  handleCloseIcon = () => {},\r\n}: Props) => (\r\n  <Modal\r\n    animation={animation}\r\n    onHide={() => {\r\n      return true;\r\n    }}\r\n    show={isOpen}\r\n    size={size}\r\n    className={customClass}\r\n  >\r\n    {isShowIconClose && (\r\n      <div\r\n        className=\"modal-content__iconClose\"\r\n        onClick={handleCloseIcon}\r\n        role=\"button\"\r\n        tabIndex={0}\r\n        onKeyUp={handleCloseIcon}\r\n      >\r\n        <img src={images.icon_close} alt=\"\" />\r\n      </div>\r\n    )}\r\n\r\n    {isShowHeader && <h3 className=\"modal-title\">{title}</h3>}\r\n\r\n    <Modal.Body>\r\n      {!isShowHeader ? (\r\n        <div className=\"modal-body__no-header\">{children}</div>\r\n      ) : (\r\n        <div className=\"modal-body__has-header\">{children}</div>\r\n      )}\r\n    </Modal.Body>\r\n    {isShowFooter && (\r\n      <Modal.Footer>\r\n        {!isShowTwoBtn ? (\r\n          <Button\r\n            type=\"button\"\r\n            customClass={customClassButton}\r\n            onClick={handleClose}\r\n          >\r\n            {textBtnRight}\r\n          </Button>\r\n        ) : (\r\n          <div className=\"group-button\">\r\n            <Button\r\n              type=\"button\"\r\n              customClass={`button--half ${customClassButton} ${classNameBtnLeft}`}\r\n              onClick={handleSubmit}\r\n              isDisabled={isDisabledButton}\r\n            >\r\n              {textBtnLeft}\r\n            </Button>\r\n            <Button\r\n              type=\"button\"\r\n              customClass={`button--half ${customClassButton} ${classNameBtnRight}`}\r\n              onClick={handleClose}\r\n            >\r\n              {textBtnRight}\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </Modal.Footer>\r\n    )}\r\n  </Modal>\r\n);\r\n\r\nModalPopup.defaultProps = {\r\n  title: '',\r\n  animation: false,\r\n  size: '',\r\n  customClass: '',\r\n  isShowIconClose: false,\r\n  isShowHeader: false,\r\n  isShowFooter: false,\r\n  isShowTwoBtn: false,\r\n  customClassButton: '',\r\n  classNameBtnLeft: '',\r\n  textBtnLeft: '',\r\n  classNameBtnRight: '',\r\n  textBtnRight: 'OK',\r\n  handleSubmit: () => {},\r\n  isDisabledButton: false,\r\n  handleCloseIcon: () => {},\r\n};\r\nexport default memo<Props>(ModalPopup);\r\n","// @flow\nimport React from 'react';\nimport { formatNumber } from 'helpers';\n\ntype Props = {\n  name?: string,\n  specifications?: string,\n  unit?: string,\n};\n\nconst CardItem = ({ name = '', specifications = '', unit = '' }: Props) => {\n  return (\n    <div className=\"card__item\">\n      <p className=\"card__item__name\">{name}</p>\n      <div className=\"card__item__group-specifications\">\n        <span className=\"card__item__number\">\n          {formatNumber(specifications)}\n        </span>\n        <span className=\"card__item__unit\">{unit}</span>\n      </div>\n    </div>\n  );\n};\n\nCardItem.defaultProps = {\n  name: '',\n  specifications: '',\n  unit: '',\n};\n\nexport default CardItem;\n","// @flow\r\nimport React, { memo } from 'react';\r\nimport IMAGES from 'themes/images';\r\n\r\nimport CardItem from './CardItem';\r\n\r\ntype Props = {\r\n  isLogoTop?: boolean,\r\n  title?: string,\r\n  listCompany?: any,\r\n  logoClick: Function,\r\n  titleClick: Function,\r\n  onClick: Function,\r\n  customClass?: string,\r\n  isCardCompany?: boolean,\r\n  isEvent?: boolean,\r\n  amountElectricDay?: number,\r\n  amountElectricMonth?: number,\r\n  electricRealtime?: number,\r\n  ratePower?: number,\r\n  cumulativeElectric?: number,\r\n};\r\n\r\nexport const Card = ({\r\n  isLogoTop = false,\r\n  title = '',\r\n  listCompany = [],\r\n  logoClick,\r\n  titleClick,\r\n  onClick,\r\n  customClass = '',\r\n  isCardCompany = false,\r\n  isEvent = false,\r\n  amountElectricDay = 0,\r\n  amountElectricMonth = 0,\r\n  electricRealtime = 0,\r\n  ratePower = 0,\r\n  cumulativeElectric = 0,\r\n}: Props) => {\r\n  return (\r\n    <div\r\n      className={`card ${customClass}`}\r\n      onClick={onClick}\r\n      role=\"presentation\"\r\n    >\r\n      {isLogoTop && (\r\n        <div className=\"card__company card__company--top\">\r\n          <img\r\n            src={listCompany.logo}\r\n            alt=\"logocompany\"\r\n            className=\"card__company__item\"\r\n          />\r\n        </div>\r\n      )}\r\n      <div className={`card__header ${isEvent ? 'header-event' : ''}`}>\r\n        <p\r\n          className={`card__title ${isEvent ? 'card__event' : ''}`}\r\n          onClick={titleClick}\r\n          role=\"presentation\"\r\n        >\r\n          {title}\r\n        </p>\r\n        {isEvent && (\r\n          <img\r\n            src={IMAGES.icon_event_card}\r\n            alt=\"\"\r\n            className=\"card__logo-event\"\r\n          />\r\n        )}\r\n      </div>\r\n      <div\r\n        className={\r\n          isCardCompany ? 'card__body card__body--company' : 'card__body'\r\n        }\r\n      >\r\n        {/* list item in card */}\r\n        <div className=\"card__list\">\r\n          <CardItem\r\n            name=\"실시간 발전량\"\r\n            specifications={electricRealtime}\r\n            unit=\"kWh\"\r\n          />\r\n          <CardItem name=\"성능비\" specifications={ratePower} unit=\"%\" />\r\n          <CardItem name=\"금일\" specifications={amountElectricDay} unit=\"kWh\" />\r\n          <CardItem\r\n            name=\"금월\"\r\n            specifications={amountElectricMonth}\r\n            unit=\"kWh\"\r\n          />\r\n          <CardItem\r\n            name=\"누적발전량\"\r\n            specifications={cumulativeElectric}\r\n            unit=\"MW\"\r\n          />\r\n        </div>\r\n\r\n        {!isLogoTop && (\r\n          <div className=\"card__company\">\r\n            {/* list company in card */}\r\n            {listCompany.map((item) => (\r\n              <img\r\n                key={item.id}\r\n                // src={IMAGES.default_logo}\r\n                src={item?.com_logo_path?.thumbnail}\r\n                alt=\"logocompany\"\r\n                className=\"card__company__item\"\r\n                onClick={() => logoClick(item?.id)}\r\n                role=\"presentation\"\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCard.defaultProps = {\r\n  title: '',\r\n  listCompany: [],\r\n  isLogoTop: false,\r\n  customClass: '',\r\n  isCardCompany: false,\r\n  isEvent: false,\r\n  amountElectricDay: 0,\r\n  amountElectricMonth: 0,\r\n  electricRealtime: 0,\r\n  ratePower: 0,\r\n  cumulativeElectric: 0,\r\n};\r\n\r\nexport default memo<Props>(Card);\r\n","// @flow\r\nimport React, { memo } from 'react';\r\nimport { formatNumber } from 'helpers';\r\nimport IMAGES from 'themes/images';\r\n\r\ntype Props = {\r\n  radiance?: number,\r\n  temperature?: number,\r\n};\r\n\r\nconst VitualData = ({ radiance = 0, temperature = 0 }: Props) => {\r\n  return (\r\n    <div className=\"vitual-data main-card\">\r\n      <div className=\"vitual-data__header main-card__header\">\r\n        <div className=\"vitual-data__title main-card__title\">기상데이터</div>\r\n      </div>\r\n\r\n      <div className=\"vitual-data__body main-card__body\">\r\n        <div className=\"vitual-data__item\">\r\n          <div className=\"vitual-data__group-name\">\r\n            <p className=\"vitual-data__name\">현재 일사량</p>\r\n            <p className=\"vitual-data__unit\">W/㎡</p>\r\n          </div>\r\n          <div className=\"vitual-data__param\">\r\n            <img src={IMAGES.motion_weather_blue} alt=\"motion\" />\r\n            <p>{formatNumber(radiance)}</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"vitual-data__item\">\r\n          <div className=\"vitual-data__group-name\">\r\n            <p className=\"vitual-data__name\">온도</p>\r\n            <p className=\"vitual-data__unit\">℃</p>\r\n          </div>\r\n          <div className=\"vitual-data__param\">\r\n            {temperature < 0 ? (\r\n              <>\r\n                <img src={IMAGES.motion_weather_blue} alt=\"motion\" />\r\n                <p>{formatNumber(temperature)}</p>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <img src={IMAGES.motion_weather_orange} alt=\"motion\" />\r\n                <p className=\"color-orange\">{formatNumber(temperature)}</p>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nVitualData.defaultProps = {\r\n  radiance: 0,\r\n  temperature: 0,\r\n};\r\n\r\nexport default memo<Props>(VitualData);\r\n","import React from 'react';\r\n\r\nimport {\r\n  Chart,\r\n  Series,\r\n  Label,\r\n  Legend,\r\n  ArgumentAxis,\r\n} from 'devextreme-react/chart';\r\n\r\ntype Props = {\r\n  measure?: [],\r\n};\r\n\r\nconst WeeklyElectric = (measure: Props) => {\r\n  const dataChart = measure?.measure;\r\n\r\n  return (\r\n    <div className=\"weekly-electric main-card\">\r\n      <div className=\"weekly-electric__header main-card__header\">\r\n        <div className=\"weekly-electric__title main-card__title\">\r\n          주간 발전 현황\r\n        </div>\r\n        <div className=\"weekly-electric__unit main-card__unit\">kWh</div>\r\n      </div>\r\n\r\n      <div className=\"weekly-electric__body main-card__body\">\r\n        <p className=\"weekly-electric__sub-unit\">단위(일)</p>\r\n        <Chart id=\"chart\" dataSource={dataChart}>\r\n          <Series argumentField=\"time\" type=\"bar\" />\r\n          <ArgumentAxis>\r\n            <Label wordWrap=\"none\" overlappingBehavior={'none'} />\r\n          </ArgumentAxis>\r\n\r\n          <Legend visible={false} />\r\n        </Chart>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeeklyElectric;\r\n","// @flow\nimport React from 'react';\nimport { formatNumber } from 'helpers';\n\ntype Props = {\n  name?: string,\n  subName?: string,\n  value?: number,\n  unit?: string,\n};\n\nconst InfoRealityItem = ({\n  name = '',\n  subName = '',\n  value = 0,\n  unit = '',\n}: Props) => {\n  return (\n    <div className=\"info-reality__item\">\n      <div className=\"info-reality__group-name\">\n        <p className=\"info-reality__name\">{name}</p>\n        <span className=\"info-reality__sub-name\">{subName}</span>\n      </div>\n      <div className=\"info-reality__group-value\">\n        <p className=\"info-reality__value\">{formatNumber(value)}</p>\n        <span className=\"info-reality__unit\">{unit}</span>\n      </div>\n    </div>\n  );\n};\n\nInfoRealityItem.defaultProps = {\n  name: '',\n  subName: '',\n  value: 0,\n  unit: '',\n};\n\nexport default InfoRealityItem;\n","// @flow\nimport React, { memo } from 'react';\nimport InfoRealityItem from './InfoRealityItem';\n\ntype Props = {\n  outputVoltage?: number,\n  outputCurrent?: number,\n  electricRealtime?: number,\n  ratePower?: number,\n};\n\nconst InfoReality = ({\n  outputVoltage = 0,\n  outputCurrent = 0,\n  electricRealtime = 0,\n  ratePower = 0,\n}: Props) => {\n  return (\n    <div className=\"info-reality main-card\">\n      <div className=\"info-reality__header main-card__header\">\n        <div className=\"info-reality__title main-card__title\">\n          실시간 계측 정보\n        </div>\n      </div>\n\n      <div className=\"info-reality__body main-card__body\">\n        <InfoRealityItem\n          name=\"출력전압\"\n          subName=\"v2\"\n          value={outputVoltage}\n          unit=\"V\"\n        />\n        <InfoRealityItem\n          name=\"출력전류\"\n          subName=\"l2\"\n          value={outputCurrent}\n          unit=\"A\"\n        />\n        <InfoRealityItem\n          name=\"전체 실시간 발전량\"\n          subName=\"p\"\n          value={electricRealtime}\n          unit=\"kW\"\n        />\n        <InfoRealityItem\n          name=\"전체 모듈 성능비\"\n          subName=\"\"\n          value={ratePower}\n          unit=\"%\"\n        />\n      </div>\n    </div>\n  );\n};\n\nInfoReality.defaultProps = {\n  outputVoltage: 0,\n  outputCurrent: 0,\n  electricRealtime: 0,\n  ratePower: 0,\n};\n\nexport default memo<Props>(InfoReality);\n","// @flow\r\nimport React, { memo } from 'react';\r\nimport { formatNumber } from 'helpers';\r\n\r\ntype Props = {\r\n  icon?: any,\r\n  name?: string,\r\n  value?: number,\r\n  customClass?: string,\r\n};\r\n\r\nconst TotalPowerItem = ({\r\n  icon = '',\r\n  name = '',\r\n  value = 0,\r\n  customClass = '',\r\n}: Props) => {\r\n  return (\r\n    <div className={`total-power__item ${customClass}`}>\r\n      <img src={icon} alt=\"\" className=\"total-power__icon\" />\r\n      <p className=\"total-power__item-name\">{name}</p>\r\n      <p className=\"total-power__item-value\">{formatNumber(value)}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nTotalPowerItem.defaultProps = {\r\n  name: '',\r\n  value: 0,\r\n  customClass: '',\r\n  icon: '',\r\n};\r\n\r\nexport default memo<Props>(TotalPowerItem);\r\n","// @flow\nimport React, { memo } from 'react';\nimport images from 'themes/images';\nimport TotalPowerItem from './TotalPowerItem';\n\ntype Props = {\n  amountElectricDay?: number,\n  amountElectricMonth?: number,\n  cumulativeElectric?: number,\n};\n\nexport const TotalPower = ({\n  amountElectricDay = 0,\n  amountElectricMonth = 0,\n  cumulativeElectric = 0,\n}: Props) => {\n  return (\n    <div className=\"total-power main-card\">\n      <div className=\"total-power__header main-card__header\">\n        <div className=\"total-power__title main-card__title\">총 발전 현황</div>\n        <div className=\"total-power__unit main-card__unit\">kWh</div>\n      </div>\n\n      <div className=\"total-power__body \">\n        <TotalPowerItem\n          icon={images.icon_day}\n          name=\"금일 발전량\"\n          value={amountElectricDay}\n          customClass=\"bg-color-day\"\n        />\n        <TotalPowerItem\n          icon={images.icon_month}\n          name=\"금월 발전량\"\n          value={amountElectricMonth}\n          customClass=\"bg-color-month\"\n        />\n        <TotalPowerItem\n          icon={images.icon_plus}\n          name=\"누적 발전량\"\n          value={cumulativeElectric}\n          customClass=\"bg-color-plus\"\n        />\n      </div>\n    </div>\n  );\n};\n\nTotalPower.defaultProps = {\n  amountElectricDay: 0,\n  amountElectricMonth: 0,\n  cumulativeElectric: 0,\n};\n\nexport default memo<Props>(TotalPower);\n","// @flow\r\nimport React, { memo } from 'react';\r\n\r\ntype Props = {\r\n  onClick: Function,\r\n  options?: Array<{ id: number, value: number, label: string }>\r\n};\r\n\r\nconst AutoSuggest = ({ onClick, options = [] }: Props) => {\r\n  return (\r\n    <div className=\"auto-suggest\">\r\n      {options\r\n        .map((option, index) => (\r\n          <p\r\n            className=\"auto-suggest__item\"\r\n            // eslint-disable-next-line react/no-array-index-key\r\n            key={index}\r\n            onClick={() => onClick(option)}\r\n            role=\"presentation\"\r\n          >\r\n            {option.label}\r\n          </p>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nAutoSuggest.defaultProps = {\r\n  options: [],\r\n};\r\n\r\nexport default memo < Props > (AutoSuggest);\r\n","// @flow\r\nimport React, { memo, useEffect, useRef, useState } from 'react';\r\nimport images from 'themes/images';\r\nimport AutoSuggest from './AutoSuggest';\r\n\r\ntype Props = {\r\n  placeholder?: string,\r\n  handleIconClick?: Function,\r\n  customClass?: string,\r\n  value?: string,\r\n  onChange?: Function,\r\n  setSearchTerm?: Function,\r\n  options?: Array<{ id: number, value: number, label: string }>,\r\n  handleKeyDown: Function,\r\n  isSpinner?: boolean,\r\n};\r\n\r\nconst Search = ({\r\n  placeholder,\r\n  handleIconClick = () => {},\r\n  customClass = '',\r\n  value = '',\r\n  onChange = () => {},\r\n  setSearchTerm = () => {},\r\n  options = [],\r\n  handleKeyDown,\r\n  isSpinner = false,\r\n}: Props) => {\r\n  const [display, setDisplay] = useState(false);\r\n\r\n  const wrapperRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n\r\n  const handleClickOutside = (event) => {\r\n    const { current: wrap } = wrapperRef;\r\n    if (wrap && !wrap.contains(event.target)) {\r\n      setDisplay(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      window.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  });\r\n\r\n  const updateSearchInput = (searchValue) => {\r\n    console.log(searchValue, 'searchValue');\r\n    setSearchTerm(searchValue);\r\n    setDisplay(false);\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <div ref={wrapperRef} className={`search ${customClass}`}>\r\n      <input\r\n        className=\"search__input\"\r\n        onClick={() => setDisplay(true)}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        onKeyPress={(e) => handleKeyDown(e)}\r\n        ref={inputRef}\r\n      />\r\n\r\n      {isSpinner && <div className=\"spinner\" />}\r\n\r\n      <img\r\n        src={images.icon_search}\r\n        alt=\"Icon Search\"\r\n        className=\"search__icon\"\r\n        onClick={handleIconClick}\r\n        role=\"presentation\"\r\n      />\r\n      {display && options.length ? (\r\n        <AutoSuggest\r\n          search={value}\r\n          onClick={updateSearchInput}\r\n          options={options}\r\n        />\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nSearch.defaultProps = {\r\n  placeholder: '',\r\n  customClass: '',\r\n  value: '',\r\n  onChange: () => {},\r\n  setSearchTerm: () => {},\r\n  handleIconClick: () => {},\r\n  options: [],\r\n  isSpinner: false,\r\n};\r\n\r\nexport default memo<Props>(Search);\r\n","import { useEffect, useState } from 'react';\r\n\r\n/**\r\n * Function: useDebounce\r\n * @param {string} value \r\n * @param {number} delay \r\n * @returns \r\n */\r\n\r\nconst useDebounce = (value, delay) => {\r\n\r\n    // State and setter for debounce value\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n    useEffect(() => {\r\n        // update debounced value after delay\r\n        const handler = setTimeout(() => {\r\n            setDebouncedValue(value);\r\n        }, delay);\r\n\r\n        // cancel the timeout if value changes\r\n        return () => {\r\n            clearTimeout(handler);\r\n        }\r\n    }, [value, delay]);\r\n\r\n    return debouncedValue;\r\n}\r\n\r\nexport default useDebounce;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport IMAGES from 'themes/images';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  getListPosition,\r\n  getListCompany,\r\n  getCardMeasureMain,\r\n  setPositionId,\r\n  setCompanyId,\r\n  getCompanySearchMain,\r\n  getPositionSearchMain,\r\n  getCardMeasureSearchPosition,\r\n  getCardMeasureSearchCompany,\r\n  getTotalMetric,\r\n} from 'modules/main/redux';\r\nimport { Card } from 'commons/components/Card';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ROUTERS from 'constants/routers';\r\nimport Search from 'commons/components/Search';\r\nimport useDebounce from 'customHooks/useDebounce';\r\nimport { ModalPopup } from 'commons/components/Modal';\r\nimport Loading from 'commons/components/Loading';\r\nimport InfoReality from '../InfoReality';\r\nimport TotalPower from '../TotalPower';\r\nimport VitualData from '../VitualData';\r\nimport WeeklyElectric from '../WeeklyElectric';\r\n\r\nconst MainPage = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const {\r\n    optionsCompany,\r\n    optionsPosition,\r\n    listPositions,\r\n    cardPositionMain,\r\n    isSpinner,\r\n    isLoading,\r\n    totalMetric,\r\n  } = useSelector((state) => state.main);\r\n  const { userInfo } = useSelector((state) => state?.account);\r\n\r\n  const [searchTerm, setSearchTerm] = useState({\r\n    label: '',\r\n    value: '',\r\n    key: '',\r\n    id: '',\r\n  });\r\n  const [modal, setModal] = useState({ isShow: false, content: '' });\r\n  const [typeSearch, setTypeSearch] = useState({ type: '', id: null });\r\n  const [labelMatric, setLabelMatric] = useState('전체');\r\n\r\n  const debouncedSearchTerm = useDebounce(searchTerm.label, 500);\r\n\r\n  useEffect(() => {\r\n    if (debouncedSearchTerm) {\r\n      dispatch(getCompanySearchMain({ keyword: debouncedSearchTerm }));\r\n      dispatch(getPositionSearchMain({ keyword: debouncedSearchTerm }));\r\n    }\r\n  }, [debouncedSearchTerm]);\r\n\r\n  const { data: totalInfo, chart } = totalMetric;\r\n\r\n  useEffect(() => {\r\n    dispatch(getListPosition());\r\n    dispatch(getListCompany());\r\n  }, []);\r\n\r\n  const count = useRef(1);\r\n\r\n  useEffect(() => {\r\n    dispatch(getCardMeasureMain({ type: 'summary', pos_id: count.current }));\r\n    dispatch(getTotalMetric());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      count.current += 1;\r\n      if (count.current > listPositions.length) {\r\n        count.current = 1;\r\n      }\r\n      if (!typeSearch.type) {\r\n        dispatch(\r\n          getCardMeasureMain({ type: 'summary', pos_id: count.current })\r\n        );\r\n      }\r\n    }, 30000);\r\n    return () => clearInterval(interval);\r\n  }, [listPositions, typeSearch]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      switch (typeSearch.type) {\r\n        case 'posId':\r\n          dispatch(getTotalMetric({ pos_id: typeSearch.id }));\r\n          break;\r\n        case 'comId':\r\n          dispatch(getTotalMetric({ com_id: typeSearch.id }));\r\n          break;\r\n        default:\r\n          dispatch(getTotalMetric());\r\n          break;\r\n      }\r\n    }, 10000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [totalMetric, typeSearch]);\r\n\r\n  // when click title redirect dashboard area of area\r\n  const handleTitleClick = (id) => {\r\n    history.push(ROUTERS.DASHBOARD_AREA);\r\n    dispatch(setPositionId({ id }));\r\n  };\r\n\r\n  // when click logo redirect dashboard company of company\r\n  const handleLogoClick = (id) => {\r\n    history.push(ROUTERS.STATUS_COMPANY);\r\n    dispatch(setCompanyId({ id }));\r\n  };\r\n\r\n  // when input search change set value\r\n  const handleSearchChange = (e) => {\r\n    const { value } = e.target;\r\n    setSearchTerm({ label: value });\r\n  };\r\n\r\n  const searchSubmit = () => {\r\n    const type = searchTerm?.key;\r\n    switch (type) {\r\n      case 'posId':\r\n        dispatch(\r\n          getCardMeasureSearchPosition({\r\n            type: 'summary',\r\n            pos_id: searchTerm.id,\r\n          })\r\n        );\r\n        dispatch(getTotalMetric({ pos_id: searchTerm.id }));\r\n        setTypeSearch({ type: 'posId', id: searchTerm.id });\r\n        setLabelMatric(searchTerm.label);\r\n        break;\r\n      case 'comId':\r\n        dispatch(\r\n          getCardMeasureSearchCompany({\r\n            type: 'summary',\r\n            com_id: searchTerm.id,\r\n          })\r\n        );\r\n        dispatch(getTotalMetric({ com_id: searchTerm.id }));\r\n        setTypeSearch({ type: 'comId', id: searchTerm.id });\r\n        setLabelMatric(searchTerm.label);\r\n        break;\r\n      default:\r\n        setModal({\r\n          ...modal,\r\n          isShow: true,\r\n          content: '구역명이나 업체명을 정확히 입력해주세요',\r\n        });\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Handle Icon search Click\r\n  const handleIconClick = () => {\r\n    searchSubmit();\r\n  };\r\n\r\n  // Handle event press key enter search\r\n  const handleKeyDownSearch = (e) => {\r\n    if (e.key === 'Enter') {\r\n      searchSubmit();\r\n    }\r\n  };\r\n\r\n  const renderPositionActive = cardPositionMain.length\r\n    ? cardPositionMain?.map((posItem) => (\r\n        <img\r\n          key={posItem.position?.id}\r\n          src={IMAGES.icon_location_on}\r\n          alt=\"\"\r\n          className=\"location\"\r\n          style={{\r\n            top: `${posItem.position?.pos_map_y}px`,\r\n            left: `${posItem.position?.pos_map_x}px`,\r\n          }}\r\n        />\r\n      ))\r\n    : '';\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Loading />}\r\n      <div className=\"main-page\">\r\n        {userInfo?.roles[0]?.id === 1 ? (\r\n          <Search\r\n            placeholder=\"회사명이나 구역명으로 검색해보세요.\"\r\n            customClass=\"main-search\"\r\n            value={searchTerm.label}\r\n            onChange={handleSearchChange}\r\n            setSearchTerm={setSearchTerm}\r\n            options={[...optionsPosition, ...optionsCompany]}\r\n            handleIconClick={handleIconClick}\r\n            handleKeyDown={handleKeyDownSearch}\r\n            isSpinner={isSpinner}\r\n          />\r\n        ) : (\r\n          ''\r\n        )}\r\n\r\n        <div className=\"current-electric\">\r\n          <div className=\"current-electric__title\">\r\n            <img src={IMAGES.icon_title} alt=\"Title\" className=\"icon-title\" />\r\n            <p className=\"title\">{labelMatric}</p>\r\n            <div className=\"line\" />\r\n          </div>\r\n          <TotalPower\r\n            amountElectricDay={totalInfo?.prod_today}\r\n            amountElectricMonth={totalInfo?.prod_inmonth}\r\n            cumulativeElectric={totalInfo?.prod_sum}\r\n          />\r\n          <WeeklyElectric measure={chart} />\r\n          <InfoReality\r\n            outputVoltage={totalInfo?.output_voltage}\r\n            outputCurrent={totalInfo?.output_current}\r\n            electricRealtime={totalInfo?.prod_realtime}\r\n            ratePower={totalInfo?.performance_ratio}\r\n          />\r\n          <VitualData\r\n            radiance={totalInfo?.radiance}\r\n            temperature={totalInfo?.temperature}\r\n          />\r\n        </div>\r\n\r\n        {listPositions &&\r\n          listPositions.map((item) => (\r\n            <img\r\n              src={IMAGES.icon_location}\r\n              alt=\"\"\r\n              className=\"location\"\r\n              style={{\r\n                top: `${item.posY}px`,\r\n                left: `${item.posX}px`,\r\n              }}\r\n              key={item.id}\r\n            />\r\n          ))}\r\n\r\n        {renderPositionActive}\r\n\r\n        {cardPositionMain &&\r\n          cardPositionMain?.map((posItem) => (\r\n            <div\r\n              // key={posItem?.position?.id}\r\n              className=\"display-main-card\"\r\n              style={{\r\n                top: `${posItem?.position?.pos_map_y - 300}px`,\r\n                left: `${posItem?.position?.pos_map_x - 300}px`,\r\n              }}\r\n            >\r\n              <Card\r\n                title={posItem?.position?.pos_name}\r\n                listCompany={posItem?.company}\r\n                amountElectricDay={posItem?.card?.prod_today}\r\n                amountElectricMonth={posItem?.card?.prod_inmonth}\r\n                electricRealtime={posItem?.card?.prod_realtime}\r\n                cumulativeElectric={posItem?.card?.prod_sum}\r\n                ratePower={posItem?.card?.performance_ratio}\r\n                titleClick={() => handleTitleClick(posItem?.position?.id)}\r\n                logoClick={handleLogoClick}\r\n              />\r\n            </div>\r\n          ))}\r\n        <ModalPopup\r\n          isOpen={modal.isShow}\r\n          isShowHeader\r\n          title=\"알림\"\r\n          isShowIconClose\r\n          isShowFooter\r\n          handleCloseIcon={() =>\r\n            setModal({\r\n              ...modal,\r\n              isShow: false,\r\n              content: '',\r\n            })\r\n          }\r\n          handleClose={() =>\r\n            setModal({\r\n              ...modal,\r\n              isShow: false,\r\n              content: '',\r\n            })\r\n          }\r\n          textBtnRight=\"확인\"\r\n        >\r\n          {modal.content}\r\n        </ModalPopup>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n"],"sourceRoot":""}