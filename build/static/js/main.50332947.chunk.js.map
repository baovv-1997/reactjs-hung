{"version":3,"sources":["routers/index.js","modules/main/redux/index.js","modules/operationStatus/redux/index.js","modules/statisticsDevelop/redux/index.js","modules/testMockupStatus/redux/index.js","stores/rootReducer.js","modules/accounts/sagas/signInSaga.js","modules/accounts/sagas/signUpSaga.js","modules/accounts/sagas/getListCompanySaga.js","modules/accounts/sagas/getListAreaSaga.js","modules/accounts/sagas/getListInverterSaga.js","modules/device/sagas/getCompanySaga.js","modules/device/sagas/getDeviceListSaga.js","modules/device/sagas/getListPositionSaga.js","modules/device/sagas/getDeivceDetailSaga.js","modules/device/sagas/updateDeviceSaga.js","modules/device/sagas/addDeviceSaga.js","modules/accounts/sagas/getAccountListSaga.js","modules/accounts/sagas/updateAccountSaga.js","modules/statusCompany/sagas/getListCompanySaga.js","modules/testDashboard/saga/getListDeviceSaga.js","modules/solarDashboard/saga/getListDeviceSaga.js","stores/rootSagas.js","App.js","stores/createStore.js","serviceWorker.js","index.js","modules/statusCompany/redux/index.js","modules/testDashboard/redux/index.js","modules/solarDashboard/redux/index.js","helpers/index.js","commons/components/Loading/index.js","apis/index.js","commons/redux/index.js","modules/device/redux/index.js","constants/routers.js","modules/accounts/redux/index.js"],"names":["StatusCompany","lazy","StatusCompanyByArea","operationStatusByCompany","operationStatusByArea","operationStatusByCompanyDetail","operationStatusByCompanyRegister","operationStatusByCompanyEdit","statisticsDevelopByCompany","statisticsDevelopByArea","statisticsOperationByCompany","statisticsOperationByArea","RegisterDevice","MainPage","DeviceManagement","DeviceDetail","SingIn","DashboardArea","DashboardCompany","TestDashboard","SolarDashboard","accountManagement","accountDetail","testMockupStatus","testMockupOperationStatus","testMockupOperationStatusDetail","testMockupOperationStatusRegister","testMockupOperationStatusEdit","testMockupOperationStatics","testMockupOperationStaticsDevelopment","testSolarMonitoringStatusDevelopment","testSolarMonitoringStatusOperation","testSolarMonitoringStaticsDevelopment","testSolarMonitoringStaticsOperation","Router","token","useSelector","state","account","API","setHeader","fallback","Loading","exact","path","ROUTERS","LOGIN","component","ROOT","DASHBOARD_AREA","DASHBOARD_COMPANY","STATUS_COMPANY","REGISTER_DEVICE","DEVICE","DEVICE_DETAIL","STATUS_COMPANY_BY_AREA","OPERATION_STATUS_BY_COMPANY","OPERATION_STATUS_BY_COMPANY_REGISTER","OPERATION_STATUS_BY_COMPANY_DETAIL","OPERATION_STATUS_BY_COMPANY_EDIT","OPERATION_STATUS_BY_AREA","TEST_DASHBOARD","SOLAR_DASHBOARD","STATISTICS_DEVELOP","STATISTICS_DEVELOP_AREA","ACCOUNT_MANAGEMENT_DETAIL","ACCOUNT_MANAGEMENT","OPERATION_STATISTICS_COMPANY","OPERATION_STATISTICS_AREA","TEST_MOCKUP_STATUS","TEST_MOCKUP_OPERATION","TEST_MOCKUP_OPERATION_STATUS_REGISTER","TEST_MOCKUP_OPERATION_STATUS_DETAIL","TEST_MOCKUP_OPERATION_STATUS_EDIT","TEST_MOCKUP_STATISTICS_OPERATION","TEST_MOCKUP_STATISTICS_DEVELOP","TEST_SOLAR_STATUS_DEVELOP","TEST_SOLAR_STATUS_OPERATION","TEST_SOLAR_STATISTICS_DEVELOP","TEST_SOLAR_STATISTICS_OPERATION","mainSlice","createSlice","name","initialState","isLoading","reducers","getMonitoringSystemDashboard","actions","reducer","operationStatusSlide","total","getListOperationStatus","action","type","isProcessing","statisticsDevelopSlide","getListStatisticsDevelop","testMockupStatusSlide","getDataTestMockupStatus","getDataTestMockupStatusSuccess","getDataTestMockupStatusFailed","listCompany","appReducer","combineReducers","accountSlice","main","mainReducer","statusCompany","statusCompanySlide","device","deviceReducer","operationStatus","testDashboard","testDashboardSlice","solarDashboard","solarDashboardSlice","statisticsDevelop","commons","commonSilice","signIn","signInSaga","call","post","ROUTES","SIGN_IN","JSON","stringify","payload","response","ok","data","put","SignInAction","errorMsg","error_msg","takeLatest","signUp","signUpSaga","SIGN_UP","signUpAction","getListCompany","getListCompanySaga","get","API_GET_LIST_COMPANY","AccountAction","getListArea","getListAreaSaga","API_GET_LIST_POSITION","getListInverter","getListInverterSaga","API_GET_LIST_DEVICE","getCompanyList","getCompanySaga","error","getListDevice","getListDeviceSaga","getPosList","getListPositionSaga","GET_POS","getDeivceDetail","getDeivceDetailSaga","updateDevice","updateDeviceSaga","UPDATE_DEVICE","id","addDevice","addDeviceSaga","azimuthAngle","color","companySelected","currentType","incidenceAngle","manager","maxPower","phoneManager","positionSelected","startDate","install_date","moment","format","manager_phone","max_power","parseInt","pos_id","value","com_id","incidence_angle","azimuth_angle","errors","getAccountList","getAccountListSaga","isDetail","ACCOUNTS","relation","updateAccount","updateAccountSaga","phone","password","passConfirm","currentOption","idInverterList","UPDATE_ACCOUNT","role","replace","password_confirmation","inverter_ids","getListStatusCompany","getListStatusCompanySaga","CompanyAction","getListDeviceTestDashboard","getListDeviceTestDashboardSaga","GET_LIST_CARD_MEASURE","console","log","TestDashboardAction","getListDeviceTestSolarDashboard","getListDeviceTestSolarDashboardSaga","TestSolarDashboardAction","RootSagas","all","singInSaga","getDeviceListSaga","App","persistConfig","key","storage","stateReconciler","seamlessImmutableReconciler","whitelist","sagaMiddleware","createSagaMiddleware","middleware","getDefaultMiddleware","thunk","serializableCheck","persistedReducer","persistReducer","appReducers","store","configureStore","devTools","process","persistor","persistStore","run","rootSagas","createStore","className","loading","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","listStatusCompany","listStatusCompanySelect","getListStatusCompanySuccess","map","item","label","com_name","getListStatusCompanyFailed","testDashBoardSlice","listDevice","per_page","current_page","getListDeviceTestDashboardSuccess","ds_id","amountElectricDay","dm_prod_day","amountElectricMonth","dm_prod_month","electricRealtime","dm_prod","ratePower","dm_prod_ratio","cumulativeElectric","dm_prod_sum","event","getListDeviceTestDashboardFailed","solarDashBoardSlice","getListDeviceTestSolarDashboardSuccess","getListDeviceTestSolarDashboardFailed","isNumberKey","e","charCode","which","keyCode","preventDefault","isOnPasteNumber","pastedData","clipboardData","getData","test","formatValue","mask","length","s","r","im","is","charAt","renderLabelType","spliceCompanyInverter","comapyInverter","countIndex","index","nameComany","listInverter","newListInverter","splice","formatNumber","num","toString","create","baseURL","menuClicking","subMenuClicking","setMenuClicking","setNestSubClicking","companyOptions","deviceList","posOptionList","perPage","totalPage","deviceDetail","dataAddNew","errorsAddDevice","getListCompanySuccess","companyOptionList","getListCompanyFailed","getListPosition","getListPositionSuccess","posOptionListFormat","pos_name","getListPositionFailed","getListDeviceSuccess","listDeviceFormat","rowId","dateSetup","ds_install_date","companyName","company","dsType","ds_type","position","moduleName","ds_name","dsManager","ds_manager","ds_manager_phone","getListDeviceFailed","getDeivceDetailSuccess","getDeivceDetailFailed","updateDeviceSuccess","updateDeviceFailed","addDeviceSuccess","addDeviceFailed","resetDeviceType","STORES","STORES_DETAIL","OPERATION_STATUS_BY_COMPANY_UPDATE","userInfo","statusCode","dataLogin","errorMessage","listArea","accountList","signInRequest","signInRequestSuccess","access_token","user_data","signInRequestFailed","getListAreaSuccess","getListAreaFailed","getListInverterSuccess","getListInverterFailed","signUpRequest","signUpRequestSuccess","signUpRequestFailed","getAccountListSuccess","no","dateCreate","created_at","roleName","roles","display_name","username","email","getAccountListFailed","updateAccountSuccess","updateAccountFailed","resetAccountType"],"mappings":"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","file":"static/js/main.50332947.chunk.js","sourcesContent":["// @flow\r\n\r\nimport React, { Suspense, lazy } from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport ROUTERS from 'constants/routers';\r\nimport Loading from 'commons/components/Loading';\r\nimport { API } from '../apis';\r\n\r\n// components\r\nconst StatusCompany = lazy(() => import('modules/statusCompany/components'));\r\nconst StatusCompanyByArea = lazy(() =>\r\n  import('modules/statusCompany/components/statusByArea')\r\n);\r\nconst operationStatusByCompany = lazy(() =>\r\n  import('modules/operationStatus/components')\r\n);\r\nconst operationStatusByArea = lazy(() =>\r\n  import('modules/operationStatus/components/statusByArea')\r\n);\r\nconst operationStatusByCompanyDetail = lazy(() =>\r\n  import('modules/operationStatus/components/detail')\r\n);\r\n\r\nconst operationStatusByCompanyRegister = lazy(() =>\r\n  import('modules/operationStatus/components/register')\r\n);\r\n\r\nconst operationStatusByCompanyEdit = lazy(() =>\r\n  import('modules/operationStatus/components/edit')\r\n);\r\n\r\nconst statisticsDevelopByCompany = lazy(() =>\r\n  import('modules/statisticsDevelop/components/statisticsByCompany')\r\n);\r\n\r\nconst statisticsDevelopByArea = lazy(() =>\r\n  import('modules/statisticsDevelop/components/statisticsByArea')\r\n);\r\n\r\nconst statisticsOperationByCompany = lazy(() =>\r\n  import('modules/operationStatistics/components/statisticsByCompany')\r\n);\r\n\r\nconst statisticsOperationByArea = lazy(() =>\r\n  import('modules/operationStatistics/components/statisticsByArea')\r\n);\r\n\r\nconst RegisterDevice = lazy(() =>\r\n  import('modules/device/components/RegisterDevice')\r\n);\r\n\r\n// components\r\nconst MainPage = lazy(() => import('modules/main/components/Dashboard'));\r\nconst DeviceManagement = lazy(() => import('modules/device/components'));\r\nconst DeviceDetail = lazy(() =>\r\n  import('modules/device/components/DeviceDetail')\r\n);\r\nconst SingIn = lazy(() => import('modules/accounts/components'));\r\nconst DashboardArea = lazy(() =>\r\n  import('modules/main/components/Dashboard/DashboardArea')\r\n);\r\nconst DashboardCompany = lazy(() =>\r\n  import('modules/main/components/Dashboard/DashboardCompany')\r\n);\r\nconst TestDashboard = lazy(() => import('modules/testDashboard/components'));\r\nconst SolarDashboard = lazy(() => import('modules/solarDashboard/components'));\r\n\r\nconst accountManagement = lazy(() =>\r\n  import('modules/accounts/components/management')\r\n);\r\n\r\nconst accountDetail = lazy(() =>\r\n  import('modules/accounts/components/management/AccountDetail')\r\n);\r\n\r\nconst testMockupStatus = lazy(() =>\r\n  import('modules/testMockupStatus/components')\r\n);\r\n\r\nconst testMockupOperationStatus = lazy(() =>\r\n  import('modules/testMockupStatus/components/operationStatus/index')\r\n);\r\n\r\nconst testMockupOperationStatusDetail = lazy(() =>\r\n  import('modules/testMockupStatus/components/operationStatus/detail')\r\n);\r\nconst testMockupOperationStatusRegister = lazy(() =>\r\n  import('modules/testMockupStatus/components/operationStatus/register')\r\n);\r\nconst testMockupOperationStatusEdit = lazy(() =>\r\n  import('modules/testMockupStatus/components/operationStatus/edit')\r\n);\r\n\r\nconst testMockupOperationStatics = lazy(() =>\r\n  import('modules/testMockupStatistics/components/statisticsOperation')\r\n);\r\nconst testMockupOperationStaticsDevelopment = lazy(() =>\r\n  import('modules/testMockupStatistics/components/statisticsDevelopment')\r\n);\r\n\r\nconst testSolarMonitoringStatusDevelopment = lazy(() =>\r\n  import('modules/testSolarMonitoringStatus/components/statusDevelop')\r\n);\r\nconst testSolarMonitoringStatusOperation = lazy(() =>\r\n  import('modules/testSolarMonitoringStatus/components/statusOperation')\r\n);\r\n\r\nconst testSolarMonitoringStaticsDevelopment = lazy(() =>\r\n  import('modules/testSolarMonitoringStatistics/components/statisticsDevelop')\r\n);\r\nconst testSolarMonitoringStaticsOperation = lazy(() =>\r\n  import('modules/testSolarMonitoringStatistics/components/statisticsOperation')\r\n);\r\n\r\nconst Router = () => {\r\n  const token = useSelector((state) => state?.account?.token);\r\n  if (token) {\r\n    API.setHeader('Authorization', `Bearer ${token}`);\r\n  }\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Suspense fallback={<Loading />}>\r\n        <Switch>\r\n          <Route exact path={ROUTERS.LOGIN} component={SingIn} />\r\n          <Route exact path={ROUTERS.ROOT} component={MainPage} />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.DASHBOARD_AREA}\r\n            component={DashboardArea}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.DASHBOARD_COMPANY}\r\n            component={DashboardCompany}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.STATUS_COMPANY}\r\n            component={StatusCompany}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.REGISTER_DEVICE}\r\n            component={RegisterDevice}\r\n          />\r\n          <Route exact path={ROUTERS.DEVICE} component={DeviceManagement} />\r\n          <Route exact path={ROUTERS.DEVICE_DETAIL} component={DeviceDetail} />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.STATUS_COMPANY_BY_AREA}\r\n            component={StatusCompanyByArea}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.OPERATION_STATUS_BY_COMPANY}\r\n            component={operationStatusByCompany}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.OPERATION_STATUS_BY_COMPANY_REGISTER}\r\n            component={operationStatusByCompanyRegister}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.OPERATION_STATUS_BY_COMPANY_DETAIL}\r\n            component={operationStatusByCompanyDetail}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.OPERATION_STATUS_BY_COMPANY_EDIT}\r\n            component={operationStatusByCompanyEdit}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.OPERATION_STATUS_BY_AREA}\r\n            component={operationStatusByArea}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.TEST_DASHBOARD}\r\n            component={TestDashboard}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.SOLAR_DASHBOARD}\r\n            component={SolarDashboard}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.STATISTICS_DEVELOP}\r\n            component={statisticsDevelopByCompany}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.STATISTICS_DEVELOP_AREA}\r\n            component={statisticsDevelopByArea}\r\n          />\r\n\r\n          <Route\r\n            exact\r\n            path={ROUTERS.ACCOUNT_MANAGEMENT_DETAIL}\r\n            component={accountDetail}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.ACCOUNT_MANAGEMENT}\r\n            component={accountManagement}\r\n          />\r\n          <Route\r\n            path={ROUTERS.OPERATION_STATISTICS_COMPANY}\r\n            component={statisticsOperationByCompany}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.OPERATION_STATISTICS_AREA}\r\n            component={statisticsOperationByArea}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.TEST_MOCKUP_STATUS}\r\n            component={testMockupStatus}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.TEST_MOCKUP_OPERATION}\r\n            component={testMockupOperationStatus}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.TEST_MOCKUP_OPERATION_STATUS_REGISTER}\r\n            component={testMockupOperationStatusRegister}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.TEST_MOCKUP_OPERATION_STATUS_DETAIL}\r\n            component={testMockupOperationStatusDetail}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.TEST_MOCKUP_OPERATION_STATUS_EDIT}\r\n            component={testMockupOperationStatusEdit}\r\n          />\r\n\r\n          <Route\r\n            exact\r\n            path={ROUTERS.TEST_MOCKUP_STATISTICS_OPERATION}\r\n            component={testMockupOperationStatics}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.TEST_MOCKUP_STATISTICS_DEVELOP}\r\n            component={testMockupOperationStaticsDevelopment}\r\n          />\r\n\r\n          <Route\r\n            exact\r\n            path={ROUTERS.TEST_SOLAR_STATUS_DEVELOP}\r\n            component={testSolarMonitoringStatusDevelopment}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.TEST_SOLAR_STATUS_OPERATION}\r\n            component={testSolarMonitoringStatusOperation}\r\n          />\r\n\r\n          <Route\r\n            exact\r\n            path={ROUTERS.TEST_SOLAR_STATISTICS_DEVELOP}\r\n            component={testSolarMonitoringStaticsDevelopment}\r\n          />\r\n          <Route\r\n            exact\r\n            path={ROUTERS.TEST_SOLAR_STATISTICS_OPERATION}\r\n            component={testSolarMonitoringStaticsOperation}\r\n          />\r\n        </Switch>\r\n      </Suspense>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n// import moment from 'moment';\r\n\r\nconst mainSlice = createSlice({\r\n  name: 'main',\r\n  initialState: {\r\n    isLoading: false,\r\n  },\r\n  reducers: {\r\n    getMonitoringSystemDashboard: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = mainSlice;\r\n\r\nexport const { getMonitoringSystemDashboard } = actions;\r\n\r\nexport default reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n// import moment from 'moment';\r\n\r\nconst operationStatusSlide = createSlice({\r\n  name: 'operationStatusStatus',\r\n  initialState: {\r\n    isLoading: false,\r\n    total: 0,\r\n  },\r\n\r\n  reducers: {\r\n    getListOperationStatus: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = true;\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = operationStatusSlide;\r\n\r\nexport const { getListOperationStatus } = actions;\r\n\r\nexport default reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n// import moment from 'moment';\r\n\r\nconst statisticsDevelopSlide = createSlice({\r\n  name: 'statisticsDevelopStatus',\r\n  initialState: {\r\n    isLoading: false,\r\n    total: 0,\r\n  },\r\n\r\n  reducers: {\r\n    getListStatisticsDevelop: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = true;\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = statisticsDevelopSlide;\r\n\r\nexport const { getListStatisticsDevelop } = actions;\r\n\r\nexport default reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n// import moment from 'moment';\r\n\r\nconst testMockupStatusSlide = createSlice({\r\n  name: 'testMockupStatus',\r\n  initialState: {\r\n    isLoading: false,\r\n    total: 0,\r\n  },\r\n\r\n  reducers: {\r\n    getDataTestMockupStatus: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = true;\r\n    },\r\n    getDataTestMockupStatusSuccess: (state, action) => {\r\n      // const { data } = action;\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n      // state.total = data?.total;\r\n    },\r\n\r\n    getDataTestMockupStatusFailed: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n      state.listCompany = [];\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = testMockupStatusSlide;\r\n\r\nexport const {\r\n  getDataTestMockupStatus,\r\n  getDataTestMockupStatusSuccess,\r\n  getDataTestMockupStatusFailed,\r\n} = actions;\r\n\r\nexport default reducer;\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\nimport accountSlice from 'modules/accounts/redux';\r\nimport mainReducer from 'modules/main/redux';\r\nimport statusCompanySlide from 'modules/statusCompany/redux';\r\nimport deviceReducer from 'modules/device/redux';\r\nimport operationStatusSlide from 'modules/operationStatus/redux';\r\nimport testDashboardSlice from 'modules/testDashboard/redux';\r\nimport solarDashboardSlice from 'modules/solarDashboard/redux';\r\nimport statisticsDevelopSlide from 'modules/statisticsDevelop/redux';\r\nimport testMockupStatusSlide from 'modules/testMockupStatus/redux';\r\nimport commonSilice from 'commons/redux';\r\n\r\nconst appReducer = combineReducers({\r\n  account: accountSlice,\r\n  main: mainReducer,\r\n  statusCompany: statusCompanySlide,\r\n  device: deviceReducer,\r\n  operationStatus: operationStatusSlide,\r\n  testDashboard: testDashboardSlice,\r\n  solarDashboard: solarDashboardSlice,\r\n  statisticsDevelop: statisticsDevelopSlide,\r\n  testMockupStatus: testMockupStatusSlide,\r\n  commons: commonSilice,\r\n});\r\n\r\nexport default appReducer;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../apis';\r\n\r\nimport * as SignInAction from '../redux';\r\n\r\n// worker Saga: will be fired on SIGN_IN actions\r\nfunction* signIn(action) {\r\n  try {\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.SIGN_IN, JSON.stringify(action.payload))\r\n    );\r\n\r\n    if (response.ok) {\r\n      const { data } = response;\r\n      // In case: signup request success\r\n      yield put({ type: SignInAction.signInRequestSuccess, data });\r\n    } else {\r\n      const { data } = response;\r\n      // In case: signup request failed\r\n      yield put({\r\n        type: SignInAction.signInRequestFailed,\r\n        errorMsg: data?.error_msg,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: SignInAction.signInRequestFailed });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `SIGN_IN` action.\r\n*/\r\nfunction* signInSaga() {\r\n  yield takeLatest(SignInAction.signInRequest, signIn);\r\n}\r\n\r\nexport default signInSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../apis';\r\n\r\nimport * as signUpAction from '../redux';\r\n\r\n// worker Saga: will be fired on SIGN_UP actions\r\nfunction* signUp(action) {\r\n  try {\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.SIGN_UP, JSON.stringify(action.payload))\r\n    );\r\n\r\n    if (response.ok) {\r\n      const { data } = response;\r\n      // In case: signup request success\r\n      yield put({ type: signUpAction.signUpRequestSuccess, data });\r\n    } else {\r\n      const { data } = response;\r\n      // In case: signup request failed\r\n      yield put({\r\n        type: signUpAction.signUpRequestFailed,\r\n        errorMsg: data?.error_msg,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: signUpAction.signUpRequestFailed });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `SIGN_UP` action.\r\n*/\r\nfunction* signUpSaga() {\r\n  yield takeLatest(signUpAction.signUpRequest, signUp);\r\n}\r\n\r\nexport default signUpSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../apis';\r\n\r\nimport * as AccountAction from '../redux';\r\n\r\n// worker Saga: will be fired on SIGN_IN actions\r\nfunction* getListCompany() {\r\n  try {\r\n    const response = yield call(() => API.get(ROUTES.API_GET_LIST_COMPANY));\r\n\r\n    if (response.ok) {\r\n      const { data } = response?.data;\r\n      // In case: signup request success\r\n      yield put({ type: AccountAction.getListCompanySuccess, data });\r\n    } else {\r\n      // In case: signup request failed\r\n      yield put({\r\n        type: AccountAction.getListCompanyFailed,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: AccountAction.getListCompanyFailed });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `SIGN_IN` action.\r\n*/\r\nfunction* getListCompanySaga() {\r\n  yield takeLatest(AccountAction.getListCompany, getListCompany);\r\n}\r\n\r\nexport default getListCompanySaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../apis';\r\n\r\nimport * as AccountAction from '../redux';\r\n\r\n// worker Saga: will be fired on SIGN_IN actions\r\nfunction* getListArea() {\r\n  try {\r\n    const response = yield call(() => API.get(ROUTES.API_GET_LIST_POSITION));\r\n\r\n    if (response.ok) {\r\n      const { data } = response?.data;\r\n      // In case: signup request success\r\n      yield put({ type: AccountAction.getListAreaSuccess, data });\r\n    } else {\r\n      // In case: signup request failed\r\n      yield put({\r\n        type: AccountAction.getListAreaFailed,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: AccountAction.getListAreaFailed });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `SIGN_IN` action.\r\n*/\r\nfunction* getListAreaSaga() {\r\n  yield takeLatest(AccountAction.getListArea, getListArea);\r\n}\r\n\r\nexport default getListAreaSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../apis';\r\n\r\nimport * as AccountAction from '../redux';\r\n\r\n// worker Saga: will be fired on SIGN_IN actions\r\nfunction* getListInverter(action) {\r\n  try {\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.API_GET_LIST_DEVICE, action.payload)\r\n    );\r\n\r\n    if (response.ok) {\r\n      const { data } = response;\r\n      // In case: signup request success\r\n      yield put({ type: AccountAction.getListInverterSuccess, data });\r\n    } else {\r\n      // In case: signup request failed\r\n      yield put({\r\n        type: AccountAction.getListInverterFailed,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: AccountAction.getListInverterFailed });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `SIGN_IN` action.\r\n*/\r\nfunction* getListInverterSaga() {\r\n  yield takeLatest(AccountAction.getListInverter, getListInverter);\r\n}\r\n\r\nexport default getListInverterSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from 'apis';\r\n\r\n// worker Saga: will be fired on SEND_INVITE actions\r\nfunction* getCompanyList() {\r\n  try {\r\n    const response = yield call(() => API.get(ROUTES.API_GET_LIST_COMPANY));\r\n\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n\r\n      // In case: request success\r\n      yield put({\r\n        type: 'device/getListCompanySuccess',\r\n        data,\r\n      });\r\n    } else {\r\n      // In case: request failed\r\n      yield put({\r\n        type: 'device/getListCompanyFailed',\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: 'device/getListCompanyFailed', error });\r\n  }\r\n}\r\n\r\nfunction* getCompanySaga() {\r\n  yield takeLatest('device/getListCompany', getCompanyList);\r\n}\r\n\r\nexport default getCompanySaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from 'apis';\r\n\r\n// worker Saga: will be fired on SEND_INVITE actions\r\nfunction* getListDevice(action) {\r\n  try {\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.API_GET_LIST_DEVICE, action.payload)\r\n    );\r\n\r\n    if (response.ok) {\r\n      const { data } = response;\r\n\r\n      // In case: request success\r\n      yield put({\r\n        type: 'device/getListDeviceSuccess',\r\n        data,\r\n      });\r\n    } else {\r\n      // In case: request failed\r\n      yield put({\r\n        type: 'device/getListDeviceFailed',\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: 'device/getListDeviceFailed', error });\r\n  }\r\n}\r\n\r\nfunction* getListDeviceSaga() {\r\n  yield takeLatest('device/getListDevice', getListDevice);\r\n}\r\n\r\nexport default getListDeviceSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from 'apis';\r\n\r\n// worker Saga: will be fired on SEND_INVITE actions\r\nfunction* getPosList() {\r\n  try {\r\n    const response = yield call(() => API.get(ROUTES.GET_POS));\r\n\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n\r\n      // In case: request success\r\n      yield put({\r\n        type: 'device/getListPositionSuccess',\r\n        data,\r\n      });\r\n    } else {\r\n      // In case: request failed\r\n      yield put({\r\n        type: 'device/getListPositionFailed',\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: 'device/getListPositionFailed', error });\r\n  }\r\n}\r\n\r\nfunction* getListPositionSaga() {\r\n  yield takeLatest('device/getListPosition', getPosList);\r\n}\r\n\r\nexport default getListPositionSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from 'apis';\r\n\r\n// worker Saga: will be fired on SEND_INVITE actions\r\nfunction* getDeivceDetail(action) {\r\n  try {\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.API_GET_LIST_DEVICE, action.payload)\r\n    );\r\n\r\n    if (response.ok) {\r\n      const { data } = response;\r\n\r\n      // In case: request success\r\n      yield put({\r\n        type: 'device/getDeivceDetailSuccess',\r\n        data,\r\n      });\r\n    } else {\r\n      // In case: request failed\r\n      yield put({\r\n        type: 'device/getDeivceDetailFailed',\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: 'device/getDeivceDetailFailed', error });\r\n  }\r\n}\r\n\r\nfunction* getDeivceDetailSaga() {\r\n  yield takeLatest('device/getDeivceDetail', getDeivceDetail);\r\n}\r\n\r\nexport default getDeivceDetailSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from 'apis';\r\n\r\n// worker Saga: will be fired on SEND_INVITE actions\r\nfunction* updateDevice(action) {\r\n  try {\r\n    const response = yield call(() =>\r\n      API.put(\r\n        ROUTES.UPDATE_DEVICE(action.payload.id),\r\n        JSON.stringify(action.payload)\r\n      )\r\n    );\r\n\r\n    if (response.ok) {\r\n      const { data } = response;\r\n\r\n      // In case: request success\r\n      yield put({\r\n        type: 'device/updateDeviceSuccess',\r\n        data,\r\n      });\r\n    } else {\r\n      // In case: request failed\r\n      yield put({\r\n        type: 'device/updateDeviceFailed',\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: 'device/updateDeviceFailed', error });\r\n  }\r\n}\r\n\r\nfunction* updateDeviceSaga() {\r\n  yield takeLatest('device/updateDevice', updateDevice);\r\n}\r\n\r\nexport default updateDeviceSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport moment from 'moment';\r\n\r\nimport { ROUTES, API } from 'apis';\r\n\r\n// worker Saga: will be fired on SEND_INVITE actions\r\nfunction* addDevice(action) {\r\n  const {\r\n    azimuthAngle,\r\n    color,\r\n    companySelected,\r\n    currentType,\r\n    incidenceAngle,\r\n    manager,\r\n    maxPower,\r\n    name,\r\n    phoneManager,\r\n    positionSelected,\r\n    startDate,\r\n  } = action.payload;\r\n  try {\r\n    const response = yield call(() =>\r\n      API.post(\r\n        ROUTES.API_GET_LIST_DEVICE,\r\n        JSON.stringify({\r\n          install_date: moment(startDate).format('YYYY-MM-DD'),\r\n          type: currentType,\r\n          name,\r\n          manager,\r\n          manager_phone: phoneManager,\r\n          max_power: parseInt(maxPower, 10),\r\n          pos_id: positionSelected.value,\r\n          com_id: companySelected.value,\r\n          incidence_angle: incidenceAngle,\r\n          azimuth_angle: azimuthAngle,\r\n          color,\r\n        })\r\n      )\r\n    );\r\n\r\n    if (response.ok) {\r\n      const { data } = response;\r\n\r\n      // In case: request success\r\n      yield put({\r\n        type: 'device/addDeviceSuccess',\r\n        data,\r\n      });\r\n    } else {\r\n      const { errors } = response.data;\r\n      // In case: request failed\r\n      yield put({\r\n        type: 'device/addDeviceFailed',\r\n        errors,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: 'device/addDeviceFailed', error });\r\n  }\r\n}\r\n\r\nfunction* addDeviceSaga() {\r\n  yield takeLatest('device/addDevice', addDevice);\r\n}\r\n\r\nexport default addDeviceSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../apis';\r\n\r\nimport * as AccountAction from '../redux';\r\n\r\nfunction* getAccountList(action) {\r\n  try {\r\n    const { isDetail } = action?.payload;\r\n    let response = {};\r\n    if (!isDetail) {\r\n      response = yield call(() =>\r\n        API.get(ROUTES.ACCOUNTS, { ...action.payload, relation: ['roles'] })\r\n      );\r\n    } else {\r\n      response = yield call(() =>\r\n        API.get(ROUTES.ACCOUNTS, {\r\n          ...action.payload,\r\n          relation: ['devices|position,company'],\r\n        })\r\n      );\r\n    }\r\n\r\n    if (response.ok) {\r\n      const { data } = response?.data;\r\n      // In case:  request success\r\n      yield put({\r\n        type: AccountAction.getAccountListSuccess,\r\n        data,\r\n        isDetail,\r\n      });\r\n    } else {\r\n      // In case:  request failed\r\n      yield put({\r\n        type: AccountAction.getAccountListFailed,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: AccountAction.getAccountListFailed });\r\n  }\r\n}\r\n\r\nfunction* getAccountListSaga() {\r\n  yield takeLatest(AccountAction.getAccountList, getAccountList);\r\n}\r\n\r\nexport default getAccountListSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../apis';\r\n\r\nimport * as AccountAction from '../redux';\r\n\r\n// worker Saga: will be fired on SIGN_IN actions\r\nfunction* updateAccount(action) {\r\n  const {\r\n    name,\r\n    phone,\r\n    password,\r\n    passConfirm,\r\n    currentOption,\r\n    idInverterList,\r\n    id,\r\n  } = action.payload;\r\n  try {\r\n    const response = yield call(() =>\r\n      API.put(\r\n        ROUTES.UPDATE_ACCOUNT(id),\r\n        JSON.stringify({\r\n          role: currentOption,\r\n          name,\r\n          phone: phone.replace(/-/g, ''),\r\n          password,\r\n          password_confirmation: passConfirm,\r\n          inverter_ids: idInverterList,\r\n        })\r\n      )\r\n    );\r\n\r\n    if (response.ok) {\r\n      const { data } = response?.data;\r\n      // In case: signup request success\r\n      yield put({ type: 'accounts/updateAccountSuccess', data });\r\n    } else {\r\n      // In case: signup request failed\r\n      yield put({\r\n        type: 'accounts/updateAccountFailed',\r\n        errors: response?.data?.errors,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: 'accounts/updateAccountFailed' });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `SIGN_IN` action.\r\n*/\r\nfunction* updateAccountSaga() {\r\n  yield takeLatest(AccountAction.updateAccount, updateAccount);\r\n}\r\n\r\nexport default updateAccountSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { ROUTES, API } from '../../../apis';\r\nimport * as CompanyAction from '../redux';\r\n\r\n// worker Saga: will be fired on SIGN_IN actions\r\nfunction* getListStatusCompany() {\r\n  try {\r\n    const response = yield call(() => API.get(ROUTES.API_GET_LIST_COMPANY));\r\n\r\n    if (response.ok) {\r\n      const { data } = response;\r\n      // In case: signup request success\r\n      yield put({ type: CompanyAction.getListStatusCompanySuccess, data });\r\n    } else {\r\n      // In case: signup request failed\r\n      yield put({\r\n        type: CompanyAction.getListStatusCompanyFailed,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: CompanyAction.getListStatusCompanyFailed });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `SIGN_IN` action.\r\n*/\r\nfunction* getListStatusCompanySaga() {\r\n  yield takeLatest(CompanyAction.getListStatusCompany, getListStatusCompany);\r\n}\r\n\r\nexport default getListStatusCompanySaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { ROUTES, API } from '../../../apis';\r\nimport * as TestDashboardAction from '../redux';\r\n\r\nfunction* getListDeviceTestDashboard() {\r\n  try {\r\n    const type = 'test_mockup';\r\n    const response = yield call(() =>\r\n      API.get(`${ROUTES.GET_LIST_CARD_MEASURE}?type=${type}`)\r\n    );\r\n\r\n    if (response.ok) {\r\n      const { data } = response;\r\n      // In case: get card measure success\r\n      console.log(data);\r\n      yield put({\r\n        type: TestDashboardAction.getListDeviceTestDashboardSuccess,\r\n        data,\r\n      });\r\n    } else {\r\n      // In case: get card measure failed\r\n      yield put({\r\n        type: TestDashboardAction.getListDeviceTestDashboardFailed,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({\r\n      type: TestDashboardAction.getListDeviceTestDashboardFailed,\r\n      error,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* getListDeviceTestDashboardSaga() {\r\n  yield takeLatest(\r\n    TestDashboardAction.getListDeviceTestDashboard,\r\n    getListDeviceTestDashboard\r\n  );\r\n}\r\n\r\nexport default getListDeviceTestDashboardSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { ROUTES, API } from '../../../apis';\r\nimport * as TestSolarDashboardAction from '../redux';\r\n\r\nfunction* getListDeviceTestSolarDashboard() {\r\n  try {\r\n    const type = 'test_mockup';\r\n    const response = yield call(() =>\r\n      API.get(`${ROUTES.GET_LIST_CARD_MEASURE}?type=${type}`)\r\n    );\r\n\r\n    if (response.ok) {\r\n      const { data } = response;\r\n      // In case: get card measure success\r\n      console.log(data);\r\n      yield put({\r\n        type: TestSolarDashboardAction.getListDeviceTestSolarDashboardSuccess,\r\n        data,\r\n      });\r\n    } else {\r\n      // In case: get card measure failed\r\n      yield put({\r\n        type: TestSolarDashboardAction.getListDeviceTestSolarDashboardFailed,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({\r\n      type: TestSolarDashboardAction.getListDeviceTestSolarDashboardFailed,\r\n      error,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* getListDeviceTestSolarDashboardSaga() {\r\n  yield takeLatest(\r\n    TestSolarDashboardAction.getListDeviceTestSolarDashboard,\r\n    getListDeviceTestSolarDashboard\r\n  );\r\n}\r\n\r\nexport default getListDeviceTestSolarDashboardSaga;\r\n","// import libs\r\nimport { all } from 'redux-saga/effects';\r\n// sign in\r\nimport singInSaga from 'modules/accounts/sagas/signInSaga';\r\nimport signUpSaga from 'modules/accounts/sagas/signUpSaga';\r\nimport getListCompanySaga from 'modules/accounts/sagas/getListCompanySaga';\r\nimport getListAreaSaga from 'modules/accounts/sagas/getListAreaSaga';\r\nimport getListInverterSaga from 'modules/accounts/sagas/getListInverterSaga';\r\nimport getCompanySaga from 'modules/device/sagas/getCompanySaga';\r\nimport getDeviceListSaga from 'modules/device/sagas/getDeviceListSaga';\r\nimport getListPositionSaga from 'modules/device/sagas/getListPositionSaga';\r\nimport getDeivceDetailSaga from 'modules/device/sagas/getDeivceDetailSaga';\r\nimport updateDeviceSaga from 'modules/device/sagas/updateDeviceSaga';\r\nimport addDeviceSaga from 'modules/device/sagas/addDeviceSaga';\r\nimport getAccountListSaga from 'modules/accounts/sagas/getAccountListSaga';\r\nimport updateAccountSaga from 'modules/accounts/sagas/updateAccountSaga';\r\n\r\nimport getListStatusCompanySaga from 'modules/statusCompany/sagas/getListCompanySaga';\r\nimport getListDeviceTestDashboardSaga from 'modules/testDashboard/saga/getListDeviceSaga';\r\nimport getListDeviceTestSolarDashboardSaga from 'modules/solarDashboard/saga/getListDeviceSaga';\r\n\r\nexport default function* RootSagas() {\r\n  yield all([\r\n    singInSaga(),\r\n    signUpSaga(),\r\n    getListCompanySaga(),\r\n    getListAreaSaga(),\r\n    getListInverterSaga(),\r\n    getListStatusCompanySaga(),\r\n    getCompanySaga(),\r\n    getDeviceListSaga(),\r\n    getListPositionSaga(),\r\n    getDeivceDetailSaga(),\r\n    updateDeviceSaga(),\r\n    addDeviceSaga(),\r\n    getAccountListSaga(),\r\n    updateAccountSaga(),\r\n    getListDeviceTestDashboardSaga(),\r\n    getListDeviceTestSolarDashboardSaga(),\r\n  ]);\r\n}\r\n","import React from 'react';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './App.scss';\r\nimport { Provider } from 'react-redux';\r\nimport Loading from 'commons/components/Loading';\r\nimport Router from 'routers';\r\nimport createStore from './stores/createStore';\r\n\r\nfunction App() {\r\n  const { store, persistor } = createStore();\r\n  return (\r\n    <div className=\"App\">\r\n      <PersistGate loading={<Loading />} persistor={persistor}>\r\n        <Provider store={store}>\r\n          <Router />\r\n        </Provider>\r\n      </PersistGate>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// libs\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport logger from 'redux-logger';\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport { seamlessImmutableReconciler } from 'redux-persist-seamless-immutable';\r\nimport appReducers from './rootReducer';\r\nimport rootSagas from './rootSagas';\r\n\r\n// creates the store\r\nexport default () => {\r\n  const persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    stateReconciler: seamlessImmutableReconciler,\r\n    whitelist: ['account', 'device', 'commons'],\r\n  };\r\n\r\n  /* ------------- Saga Middleware ------------- */\r\n\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middleware = [\r\n    ...getDefaultMiddleware({\r\n      thunk: false,\r\n      serializableCheck: false,\r\n    }),\r\n    sagaMiddleware,\r\n  ];\r\n\r\n  const devMode = process.env.NODE_ENV === 'development';\r\n\r\n  if (devMode) {\r\n    middleware.push(logger);\r\n  }\r\n\r\n  /* ------------- AutoRehydrate Enhancer ------------- */\r\n  const persistedReducer = persistReducer(persistConfig, appReducers);\r\n\r\n  const store = configureStore({\r\n    reducer: persistedReducer,\r\n    devTools: devMode,\r\n    middleware,\r\n  });\r\n\r\n  const persistor = persistStore(store);\r\n\r\n  // kick off root saga\r\n  sagaMiddleware.run(rootSagas);\r\n\r\n  return { store, persistor };\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Suspense } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Suspense fallback={<div className=\"d-none\">Loading</div>}>\r\n      <App />\r\n    </Suspense>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n// import moment from 'moment';\r\n\r\nconst statusCompanySlide = createSlice({\r\n  name: 'statusCompany',\r\n  initialState: {\r\n    isLoading: false,\r\n    listStatusCompany: [],\r\n    listStatusCompanySelect: [],\r\n    total: 0,\r\n  },\r\n\r\n  reducers: {\r\n    getListStatusCompany: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = true;\r\n    },\r\n    getListStatusCompanySuccess: (state, action) => {\r\n      const { data } = action;\r\n      const listStatusCompanySelect =\r\n        data &&\r\n        data?.data.map((item) => ({\r\n          id: item.id,\r\n          value: item.id,\r\n          label: item.com_name,\r\n        }));\r\n      state.listStatusCompanySelect = listStatusCompanySelect || [];\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n      // state.total = data?.total;\r\n    },\r\n\r\n    getListStatusCompanyFailed: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n      state.listCompany = [];\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = statusCompanySlide;\r\n\r\nexport const {\r\n  getListStatusCompany,\r\n  getListStatusCompanySuccess,\r\n  getListStatusCompanyFailed,\r\n} = actions;\r\n\r\nexport default reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n// import moment from 'moment';\r\n\r\nconst testDashBoardSlice = createSlice({\r\n  name: 'testDashboard',\r\n  initialState: {\r\n    isLoading: false,\r\n    type: '',\r\n    listDevice: [],\r\n    total: 0,\r\n    per_page: 0,\r\n    current_page: 0,\r\n  },\r\n  reducers: {\r\n    getListDeviceTestDashboard: (state, action) => {\r\n      state.isLoading = true;\r\n      state.type = action.type;\r\n    },\r\n    getListDeviceTestDashboardSuccess: (state, action) => {\r\n      const { data } = action;\r\n      const listDevice =\r\n        data &&\r\n        data?.data.map((item) => ({\r\n          id: item.ds_id,\r\n          name: item.com_name,\r\n          amountElectricDay: item.dm_prod_day,\r\n          amountElectricMonth: item.dm_prod_month,\r\n          electricRealtime: item.dm_prod,\r\n          ratePower: item.dm_prod_ratio,\r\n          cumulativeElectric: item.dm_prod_sum,\r\n          event: item.event,\r\n        }));\r\n      state.listDevice = listDevice || [];\r\n      state.type = action.type;\r\n      state.total = data?.total;\r\n      state.per_page = data?.per_page;\r\n      state.current_page = data?.current_page;\r\n      state.isLoading = false;\r\n    },\r\n    getListDeviceTestDashboardFailed: (state, action) => {\r\n      state.isLoading = false;\r\n      state.type = action.type;\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = testDashBoardSlice;\r\n\r\nexport const {\r\n  getListDeviceTestDashboard,\r\n  getListDeviceTestDashboardSuccess,\r\n  getListDeviceTestDashboardFailed,\r\n} = actions;\r\n\r\nexport default reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n// import moment from 'moment';\r\n\r\nconst solarDashBoardSlice = createSlice({\r\n  name: 'solarDashboard',\r\n  initialState: {\r\n    isLoading: false,\r\n  },\r\n  reducers: {\r\n    getListDeviceTestSolarDashboard: (state, action) => {\r\n      state.isLoading = true;\r\n      state.type = action.type;\r\n    },\r\n    getListDeviceTestSolarDashboardSuccess: (state, action) => {\r\n      const { data } = action;\r\n      const listDevice =\r\n        data &&\r\n        data?.data.map((item) => ({\r\n          id: item.ds_id,\r\n          name: item.com_name,\r\n          amountElectricDay: item.dm_prod_day,\r\n          amountElectricMonth: item.dm_prod_month,\r\n          electricRealtime: item.dm_prod,\r\n          ratePower: item.dm_prod_ratio,\r\n          cumulativeElectric: item.dm_prod_sum,\r\n          event: item.event,\r\n        }));\r\n      state.listDevice = listDevice || [];\r\n      state.type = action.type;\r\n      state.total = data?.total;\r\n      state.current_page = data?.current_page;\r\n      state.isLoading = false;\r\n    },\r\n    getListDeviceTestSolarDashboardFailed: (state, action) => {\r\n      state.isLoading = false;\r\n      state.type = action.type;\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = solarDashBoardSlice;\r\n\r\nexport const {\r\n  getListDeviceTestSolarDashboard,\r\n  getListDeviceTestSolarDashboardSuccess,\r\n  getListDeviceTestSolarDashboardFailed,\r\n} = actions;\r\n\r\nexport default reducer;\r\n","// eslint-disable-next-line import/prefer-default-export\r\n/* eslint-disable no-plusplus */\r\nexport function isNumberKey(e) {\r\n  const charCode = e.which ? e.which : e.keyCode;\r\n  if (charCode > 31 && (charCode < 48 || charCode > 57)) {\r\n    e.preventDefault();\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function isOnPasteNumber(e) {\r\n  const pastedData = e.clipboardData.getData('text/plain');\r\n  const regex = /[0-9]/;\r\n  if (!regex.test(pastedData)) {\r\n    e.preventDefault();\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport const formatValue = (value: any) => {\r\n  let mask = '';\r\n  switch (value?.length) {\r\n    case 10:\r\n      mask = 'XXX-XXX-XXXX';\r\n      break;\r\n    case 11:\r\n      mask = 'XXX-XXXX-XXXX';\r\n      break;\r\n    default:\r\n      mask = 'XXX-XXXXXX-XXXXXX';\r\n      break;\r\n  }\r\n  const s = `${value}`;\r\n  let r = '';\r\n  for (let im = 0, is = 0; im < mask.length && is < s.length; im++) {\r\n    r += mask[im] === 'X' ? s.charAt(is++) : mask.charAt(im);\r\n  }\r\n  return r;\r\n};\r\n\r\nexport const renderLabelType = (type) => {\r\n  let label = '';\r\n  switch (parseInt(type, 10)) {\r\n    case 0:\r\n      label = '실증단지';\r\n      break;\r\n    case 1:\r\n      label = 'RTU(목업)';\r\n      break;\r\n    case 2:\r\n      label = '테스트(실증단지)';\r\n      break;\r\n    case 3:\r\n      label = '테스트(목업)';\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return label;\r\n};\r\n\r\nexport const spliceCompanyInverter = (comapyInverter) => {\r\n  let countIndex = 0;\r\n\r\n  comapyInverter.map((item, index) => {\r\n    const { id, nameComany, listInverter } = item;\r\n\r\n    if (listInverter.length === 4 && countIndex === 1) {\r\n      const newListInverter = listInverter.splice(3);\r\n      comapyInverter.splice(index + 1, 0, {\r\n        id,\r\n        nameComany,\r\n        listInverter: newListInverter,\r\n      });\r\n    }\r\n\r\n    if (listInverter.length === 4 && countIndex === 2) {\r\n      const newListInverter = listInverter.splice(2);\r\n      comapyInverter.splice(index + 1, 0, {\r\n        id,\r\n        nameComany,\r\n        listInverter: newListInverter,\r\n      });\r\n    }\r\n\r\n    if (listInverter.length === 4 && countIndex === 3) {\r\n      const newListInverter = listInverter.splice(1);\r\n      comapyInverter.splice(index + 1, 0, {\r\n        id,\r\n        nameComany,\r\n        listInverter: newListInverter,\r\n      });\r\n    }\r\n\r\n    if (listInverter.length === 3 && countIndex === 2) {\r\n      const newListInverter = listInverter.splice(2);\r\n      console.log(newListInverter, 'newListInverter');\r\n      comapyInverter.splice(index + 1, 0, {\r\n        id,\r\n        nameComany,\r\n        listInverter: newListInverter,\r\n      });\r\n    }\r\n\r\n    if (listInverter.length === 3 && countIndex === 3) {\r\n      const newListInverter = listInverter.splice(1);\r\n      comapyInverter.splice(index + 1, 0, {\r\n        id,\r\n        nameComany,\r\n        listInverter: newListInverter,\r\n      });\r\n    }\r\n\r\n    if (listInverter.length === 2 && countIndex === 3) {\r\n      const newListInverter = listInverter.splice(1);\r\n      comapyInverter.splice(index + 1, 0, {\r\n        id,\r\n        nameComany,\r\n        listInverter: newListInverter,\r\n      });\r\n    }\r\n    countIndex += listInverter.length;\r\n    return comapyInverter;\r\n  });\r\n};\r\n\r\nexport const formatNumber = (num) => {\r\n  return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\r\n};\r\n","// @flow\r\n// libs\r\nimport React from 'react';\r\n\r\nexport const Loading = () => (\r\n  <div className=\"wrapper-loader\">\r\n    <div className=\"loader\"> </div>\r\n  </div>\r\n);\r\n\r\nexport default Loading;\r\n","/* eslint-disable camelcase */\r\n// import libs\r\nimport { create } from 'apisauce';\r\n\r\nconst API_URI = process.env.REACT_APP_API_URL;\r\n\r\nexport const ROUTES = {\r\n  // Auths\r\n  SIGN_IN: `/auth/login`,\r\n  SIGN_UP: `/auth/register`,\r\n\r\n  API_GET_LIST_COMPANY: `/company`,\r\n  API_GET_LIST_POSITION: `/position`,\r\n  API_GET_LIST_DEVICE: `/device`,\r\n  UPDATE_DEVICE: (id) => `device/${id}`,\r\n  GET_POS: '/position',\r\n  ACCOUNTS: '/account',\r\n  UPDATE_ACCOUNT: (id) => `account/${id}`,\r\n  GET_LIST_CARD_MEASURE: `/data/cards`,\r\n};\r\n\r\nexport const API = create({\r\n  baseURL: API_URI,\r\n});\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  menuClicking: {},\r\n  subMenuClicking: {},\r\n};\r\n\r\nconst commonSilice = createSlice({\r\n  name: 'commons',\r\n  initialState,\r\n  reducers: {\r\n    setMenuClicking: (state, action) => {\r\n      state.type = action.type;\r\n      state.menuClicking = action.payload;\r\n    },\r\n    setNestSubClicking: (state, action) => {\r\n      state.type = action.type;\r\n      state.subMenuClicking = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = commonSilice;\r\n\r\nexport const { setMenuClicking, setNestSubClicking } = actions;\r\n\r\nexport default reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { renderLabelType, formatValue } from 'helpers/';\r\n// import moment from 'moment';\r\n\r\nconst mainSlice = createSlice({\r\n  name: 'device',\r\n  initialState: {\r\n    isLoading: false,\r\n    companyOptions: [],\r\n    deviceList: [],\r\n    posOptionList: [],\r\n    perPage: 0,\r\n    totalPage: 0,\r\n    deviceDetail: {},\r\n    dataAddNew: [],\r\n    errorsAddDevice: {},\r\n  },\r\n  reducers: {\r\n    getListCompany: (state, action) => {\r\n      state.isLoading = true;\r\n      state.type = action.type;\r\n    },\r\n    getListCompanySuccess: (state, action) => {\r\n      const companyOptionList = action?.data?.map((item) => ({\r\n        value: item.id,\r\n        label: item.com_name,\r\n      }));\r\n      state.isLoading = false;\r\n      state.companyOptions = companyOptionList;\r\n      state.type = action.type;\r\n    },\r\n    getListCompanyFailed: (state, action) => {\r\n      state.isLoading = false;\r\n      state.type = action.type;\r\n    },\r\n\r\n    getListPosition: (state, action) => {\r\n      state.isLoading = true;\r\n      state.type = action.type;\r\n    },\r\n    getListPositionSuccess: (state, action) => {\r\n      const posOptionListFormat = action?.data?.map((item) => ({\r\n        value: item.id,\r\n        label: item.pos_name,\r\n      }));\r\n      state.isLoading = false;\r\n      state.posOptionList = posOptionListFormat;\r\n    },\r\n    getListPositionFailed: (state) => {\r\n      state.isLoading = false;\r\n    },\r\n\r\n    getListDevice: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    getListDeviceSuccess: (state, action) => {\r\n      const listDeviceFormat = action?.data?.data?.map((item, index) => ({\r\n        rowId:\r\n          `${\r\n            action.data.total -\r\n            (action?.data?.current_page - 1) * action?.data?.total -\r\n            index\r\n          }` || '',\r\n        dateSetup: item.ds_install_date,\r\n        companyName: item?.company?.com_name,\r\n        dsType: renderLabelType(item?.ds_type),\r\n        position: item?.position?.pos_name,\r\n        moduleName: item?.ds_name,\r\n        dsManager: `${item?.ds_manager} / ${formatValue(\r\n          item?.ds_manager_phone\r\n        )}`,\r\n        id: item?.id,\r\n      }));\r\n      state.isLoading = false;\r\n      state.deviceList = listDeviceFormat;\r\n      state.perPage = action?.data?.per_page;\r\n      state.totalPage = action?.data?.total;\r\n      state.type = action.type;\r\n    },\r\n    getListDeviceFailed: (state, action) => {\r\n      state.isLoading = false;\r\n      state.type = action.type;\r\n    },\r\n    getDeivceDetail: (state, action) => {\r\n      state.isLoading = true;\r\n      state.type = action.type;\r\n    },\r\n    getDeivceDetailSuccess: (state, action) => {\r\n      state.isLoading = false;\r\n      state.deviceDetail = action.data;\r\n      state.type = action.type;\r\n    },\r\n    getDeivceDetailFailed: (state, action) => {\r\n      state.isLoading = false;\r\n      state.type = action.type;\r\n    },\r\n\r\n    updateDevice: (state, action) => {\r\n      state.isLoading = true;\r\n      state.type = action.type;\r\n    },\r\n\r\n    updateDeviceSuccess: (state, action) => {\r\n      state.isLoading = false;\r\n      state.type = action.type;\r\n    },\r\n    updateDeviceFailed: (state, action) => {\r\n      state.isLoading = false;\r\n      state.type = action.type;\r\n    },\r\n\r\n    addDevice: (state, action) => {\r\n      state.isLoading = true;\r\n      state.type = action.type;\r\n    },\r\n    addDeviceSuccess: (state, action) => {\r\n      state.isLoading = false;\r\n      state.dataAddNew = action?.data?.data;\r\n      state.type = action.type;\r\n    },\r\n    addDeviceFailed: (state, action) => {\r\n      state.isLoading = false;\r\n      state.type = action.type;\r\n      state.errorsAddDevice = action.errors;\r\n    },\r\n    resetDeviceType: (state) => {\r\n      state.type = '';\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = mainSlice;\r\n\r\nexport const {\r\n  getListCompany,\r\n  getListCompanySuccess,\r\n  getListCompanyFailed,\r\n  getListDevice,\r\n  getListDeviceSuccess,\r\n  getListDeviceFailed,\r\n  getListPosition,\r\n  getListPositionSuccess,\r\n  getListPositionFailed,\r\n  getDeivceDetail,\r\n  getDeivceDetailSuccess,\r\n  getDeivceDetailFailed,\r\n  updateDevice,\r\n  updateDeviceSuccess,\r\n  updateDeviceFailed,\r\n  addDevice,\r\n  addDeviceSuccess,\r\n  addDeviceFailed,\r\n  resetDeviceType,\r\n} = actions;\r\n\r\nexport default reducer;\r\n","const ROUTERS = {\r\n  ROOT: '/',\r\n  DASHBOARD_AREA: '/dashboard-area',\r\n  DASHBOARD_COMPANY: '/dashboard-company',\r\n  LOGIN: '/login',\r\n  DEVICE: '/devices',\r\n  STORES: '/stores',\r\n  STORES_DETAIL: '/stores/:id',\r\n  REGISTER_DEVICE: '/devices/register',\r\n  DEVICE_DETAIL: '/devices/:id',\r\n  STATUS_COMPANY: `/status/company-development`,\r\n  STATUS_COMPANY_BY_AREA: `/status/company-by-area`,\r\n  OPERATION_STATUS_BY_COMPANY: `/operation/status-by-company`,\r\n  OPERATION_STATUS_BY_AREA: `/operation/status-by-area`,\r\n  OPERATION_STATUS_BY_COMPANY_DETAIL: `/operation/status-by-company/:id`,\r\n  OPERATION_STATUS_BY_COMPANY_REGISTER: `/operation/status-by-company/register`,\r\n  OPERATION_STATUS_BY_COMPANY_UPDATE: `/operation/status-by-company/update/:id`,\r\n  TEST_DASHBOARD: `/test/dashboard`,\r\n  SOLAR_DASHBOARD: `/solar/dashboard`,\r\n  OPERATION_STATUS_BY_COMPANY_EDIT: `/operation/status-by-company/edit/:id`,\r\n\r\n  ACCOUNT_MANAGEMENT: '/accounts',\r\n  ACCOUNT_MANAGEMENT_DETAIL: '/accounts/:id',\r\n  STATISTICS_DEVELOP: `/statistics/develop/develop-by-company`,\r\n  STATISTICS_DEVELOP_AREA: `/statistics/develop/develop-by-area`,\r\n  OPERATION_STATISTICS_COMPANY: `/statistics/operation/operation-by-company`,\r\n  OPERATION_STATISTICS_AREA: `/statistics/operation/operation-by-area`,\r\n  // Test mockup solar\r\n  TEST_MOCKUP_STATUS: `/test/mockup/status-of-development`,\r\n  TEST_MOCKUP_OPERATION: `/test/mockup/operation-status`,\r\n\r\n  TEST_MOCKUP_OPERATION_STATUS_DETAIL: `/test/mockup/operation-status/:id`,\r\n  TEST_MOCKUP_OPERATION_STATUS_REGISTER: `/test/mockup/operation-status/register`,\r\n  TEST_MOCKUP_OPERATION_STATUS_EDIT: `/test/mockup/operation-status/edit/:id`,\r\n\r\n  TEST_MOCKUP_STATISTICS_DEVELOP: `/test/mockup/statistics/development-statistics`,\r\n  TEST_MOCKUP_STATISTICS_OPERATION: `/test/mockup/statistics/operation-statistics`,\r\n\r\n  // Test solar monitoring\r\n  TEST_SOLAR_STATUS_DEVELOP: `/test/solar-monitoring/status-development`,\r\n  TEST_SOLAR_STATUS_OPERATION: `/test/solar-monitoring/status-operation`,\r\n\r\n  TEST_SOLAR_STATISTICS_DEVELOP: `/test/solar-monitoring/statistics/development-statistics`,\r\n  TEST_SOLAR_STATISTICS_OPERATION: `/test/solar-monitoring/statistics/operation-statistics`,\r\n};\r\n\r\nexport default ROUTERS;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport moment from 'moment';\r\nimport { formatValue } from 'helpers';\r\n\r\nconst initialState = {\r\n  userInfo: {},\r\n  isProcessing: false,\r\n  type: '',\r\n  token: '',\r\n  statusCode: null,\r\n  dataLogin: {},\r\n  errorMessage: '',\r\n  listCompany: [],\r\n  listArea: [],\r\n  listInverter: [],\r\n  accountList: [],\r\n  accountDetail: {},\r\n  errors: {},\r\n};\r\n\r\nconst accountSlice = createSlice({\r\n  name: 'accounts',\r\n  initialState,\r\n  reducers: {\r\n    signInRequest: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = true;\r\n    },\r\n    signInRequestSuccess: (state, action) => {\r\n      const { data } = action;\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n      state.token = data?.access_token;\r\n      state.userInfo = data?.user_data;\r\n      state.errorMsg = '';\r\n    },\r\n\r\n    signInRequestFailed: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n      state.errorMsg = action?.errorMsg || '';\r\n    },\r\n\r\n    getListCompany: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = true;\r\n    },\r\n    getListCompanySuccess: (state, action) => {\r\n      const { data } = action;\r\n      const listCompany =\r\n        data &&\r\n        data.map((item) => ({\r\n          id: item.id,\r\n          value: item.id,\r\n          label: item.com_name,\r\n        }));\r\n      state.listCompany = listCompany || [];\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n    },\r\n\r\n    getListCompanyFailed: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n      state.listCompany = [];\r\n    },\r\n\r\n    getListArea: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = true;\r\n    },\r\n    getListAreaSuccess: (state, action) => {\r\n      const { data } = action;\r\n      const listArea =\r\n        data &&\r\n        data.map((item) => ({\r\n          id: item.id,\r\n          value: item.id,\r\n          label: item.pos_name,\r\n        }));\r\n      state.listArea = listArea || [];\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n    },\r\n\r\n    getListAreaFailed: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n      state.listArea = [];\r\n    },\r\n\r\n    getListInverter: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = true;\r\n    },\r\n    getListInverterSuccess: (state, action) => {\r\n      const { data } = action;\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n      const listInverter =\r\n        data &&\r\n        data.map((item) => ({\r\n          id: item.id,\r\n          value: item.id,\r\n          label: item.ds_name,\r\n        }));\r\n      state.listInverter = listInverter || [];\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n    },\r\n\r\n    getListInverterFailed: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n      state.listInverter = [];\r\n    },\r\n\r\n    signUpRequest: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = true;\r\n    },\r\n    signUpRequestSuccess: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n    },\r\n    signUpRequestFailed: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n    },\r\n    getAccountList: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = true;\r\n    },\r\n    getAccountListSuccess: (state, action) => {\r\n      if (!action.isDetail) {\r\n        state.accountList = action?.data?.data.map((item) => ({\r\n          no: item.id,\r\n          dateCreate: moment(item?.created_at).format('YYYY-MM-DD'),\r\n          roleName: item?.roles[0]?.display_name,\r\n          username: item?.username,\r\n          email: item?.email,\r\n          name: item?.name,\r\n          phone: item?.phone && formatValue(item?.phone),\r\n        }));\r\n      } else {\r\n        state.accountDetail = action?.data;\r\n      }\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n      state.perPage = action?.data?.per_page;\r\n      state.totalPage = action?.data?.total;\r\n      state.type = action.type;\r\n    },\r\n    getAccountListFailed: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n    },\r\n\r\n    updateAccount: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = true;\r\n    },\r\n    updateAccountSuccess: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n    },\r\n    updateAccountFailed: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n      state.errors = action.errors;\r\n    },\r\n    resetAccountType: (state) => {\r\n      state.type = '';\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = accountSlice;\r\n\r\nexport const {\r\n  signInRequest,\r\n  signInRequestSuccess,\r\n  signInRequestFailed,\r\n  signUpRequest,\r\n  signUpRequestSuccess,\r\n  signUpRequestFailed,\r\n  getListCompany,\r\n  getListCompanySuccess,\r\n  getListCompanyFailed,\r\n  getListArea,\r\n  getListAreaSuccess,\r\n  getListAreaFailed,\r\n  getListInverter,\r\n  getListInverterSuccess,\r\n  getListInverterFailed,\r\n  getAccountList,\r\n  getAccountListFailed,\r\n  getAccountListSuccess,\r\n  updateAccount,\r\n  updateAccountFailed,\r\n  updateAccountSuccess,\r\n  resetAccountType,\r\n} = actions;\r\n\r\nexport default reducer;\r\n"],"sourceRoot":""}