{"version":3,"sources":["commons/components/Select/index.js","commons/components/Card/CardItem.js","commons/components/Card/index.js","modules/main/components/VitualData/index.js","modules/main/components/WeeklyElectric/index.js","modules/main/components/InfoReality/InfoRealityItem.js","modules/main/components/InfoReality/index.js","modules/main/components/TotalPower/TotalPowerItem.js","modules/main/components/TotalPower/index.js","modules/main/components/Dashboard/DashboardArea/index.js"],"names":["SelectDropdown","placeholder","errorMsg","label","disabled","isSearchable","onBlur","onChange","innerRef","option","noOptionsMessage","listOptionString","customClass","request","noLabel","listItem","useState","isActive","setIsActive","className","length","components","DropdownIndicator","props","selectProps","menuIsOpen","ref","value","options","map","item","id","name","blurInputOnSelect","isDisabled","defaultProps","CardItem","specifications","unit","formatNumber","Card","isLogoTop","title","listCompany","logoClick","titleClick","onClick","isCardCompany","isEvent","amountElectricDay","amountElectricMonth","electricRealtime","ratePower","cumulativeElectric","role","src","logo","alt","IMAGES","icon_event_card","key","com_logo_path","thumbnail","memo","VitualData","radiance","temperature","motion_weather_blue","motion_weather_orange","WeeklyElectric","measure","dataChart","dataSource","argumentField","type","wordWrap","overlappingBehavior","visible","InfoRealityItem","subName","InfoReality","outputVoltage","outputCurrent","TotalPowerItem","icon","TotalPower","images","icon_day","icon_month","icon_plus","DashboardArea","history","useHistory","dispatch","useDispatch","useSelector","state","main","isLoading","cardMeasureArea","listPositions","positionId","totalMetric","totalInfo","data","chart","bgImage","setBgImage","positionName","setPositionName","optionDropdown","setOptionDropdown","posId","useRef","useEffect","getListPosition","current","positionSelected","filter","setPositionId","indexDefault","findIndex","includes","getCardMeasureArea","pos_id","getTotalMetric","pos_map_path","interval","setInterval","clearInterval","handleLogoClick","push","ROUTERS","STATUS_COMPANY","setCompanyId","style","backgroundImage","ops","icon_title","prod_today","prod_inmonth","prod_sum","output_voltage","output_current","prod_realtime","performance_ratio","posItem","index","company","com_name","card"],"mappings":"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","file":"static/js/28.820058fb.chunk.js","sourcesContent":["// @flow\r\nimport React, { useState } from 'react';\r\nimport Select, { components } from 'react-select';\r\n\r\ntype Props = {\r\n  placeholder?: string,\r\n  errorMsg?: string,\r\n  label?: string,\r\n  disabled?: boolean,\r\n  isSearchable?: boolean,\r\n  onBlur?: Function,\r\n  onChange?: Function,\r\n  listOptionString?: Array<{ id: number, name: any }>,\r\n  listItem?: Array<{\r\n    id: number,\r\n    value: any,\r\n    label: string,\r\n  }>,\r\n  innerRef?: any,\r\n  option?: Object,\r\n  noOptionsMessage?: Function,\r\n  customClass?: string,\r\n  request?: boolean,\r\n  noLabel?: boolean,\r\n};\r\nconst SelectDropdown = ({\r\n  placeholder = '',\r\n  errorMsg = '',\r\n  label = '',\r\n  disabled = false,\r\n  isSearchable = false,\r\n  onBlur = null,\r\n  onChange = () => {},\r\n  innerRef = null,\r\n  option = {},\r\n  noOptionsMessage = () => {},\r\n  listOptionString = [],\r\n  customClass = '',\r\n  request = false,\r\n  noLabel = false,\r\n  listItem,\r\n}: Props) => {\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  const DropdownIndicator = (props) => {\r\n    setIsActive(props?.selectProps?.menuIsOpen);\r\n    return (\r\n      <components.DropdownIndicator {...props}>\r\n        <div className=\"d-none\" />\r\n      </components.DropdownIndicator>\r\n    );\r\n  };\r\n  return (\r\n    <div\r\n      className={`customer-select ${customClass.length > 0 ? customClass : ''}`}\r\n    >\r\n      {!!label && (\r\n        <p className=\"input__label\">\r\n          {label}\r\n          {request && <span className=\"request\">*</span>}\r\n        </p>\r\n      )}\r\n      <div className={`input__box ${isActive ? 'down' : ''}`}>\r\n        <Select\r\n          placeholder={placeholder}\r\n          components={{ DropdownIndicator }}\r\n          ref={innerRef}\r\n          value={option || null}\r\n          onChange={onChange}\r\n          noOptionsMessage={noOptionsMessage}\r\n          // menuIsOpen\r\n          options={\r\n            noLabel\r\n              ? listOptionString.map((item) => ({\r\n                  id: item.id,\r\n                  value: item.name,\r\n                  label: item.name,\r\n                }))\r\n              : listItem\r\n          }\r\n          blurInputOnSelect={onBlur}\r\n          isDisabled={disabled}\r\n          isSearchable={isSearchable}\r\n        />\r\n      </div>\r\n      {errorMsg && <p className=\"error-msg\">{errorMsg}</p>}\r\n    </div>\r\n  );\r\n};\r\nSelectDropdown.defaultProps = {\r\n  placeholder: '',\r\n  errorMsg: '',\r\n  label: '',\r\n  disabled: false,\r\n  isSearchable: false,\r\n  // icon: '',\r\n  noLabel: false,\r\n  onBlur: null,\r\n  onChange: () => {},\r\n  innerRef: null,\r\n  listItem: [],\r\n  listOptionString: [],\r\n  option: {},\r\n  noOptionsMessage: () => {},\r\n  customClass: '',\r\n  request: false,\r\n};\r\nexport default SelectDropdown;\r\n","// @flow\nimport React from 'react';\nimport { formatNumber } from 'helpers';\n\ntype Props = {\n  name?: string,\n  specifications?: string,\n  unit?: string,\n};\n\nconst CardItem = ({ name = '', specifications = '', unit = '' }: Props) => {\n  return (\n    <div className=\"card__item\">\n      <p className=\"card__item__name\">{name}</p>\n      <div className=\"card__item__group-specifications\">\n        <span className=\"card__item__number\">\n          {formatNumber(specifications)}\n        </span>\n        <span className=\"card__item__unit\">{unit}</span>\n      </div>\n    </div>\n  );\n};\n\nCardItem.defaultProps = {\n  name: '',\n  specifications: '',\n  unit: '',\n};\n\nexport default CardItem;\n","// @flow\r\nimport React, { memo } from 'react';\r\nimport IMAGES from 'themes/images';\r\n\r\nimport CardItem from './CardItem';\r\n\r\ntype Props = {\r\n  isLogoTop?: boolean,\r\n  title?: string,\r\n  listCompany?: any,\r\n  logoClick: Function,\r\n  titleClick: Function,\r\n  onClick: Function,\r\n  customClass?: string,\r\n  isCardCompany?: boolean,\r\n  isEvent?: boolean,\r\n  amountElectricDay?: number,\r\n  amountElectricMonth?: number,\r\n  electricRealtime?: number,\r\n  ratePower?: number,\r\n  cumulativeElectric?: number,\r\n};\r\n\r\nexport const Card = ({\r\n  isLogoTop = false,\r\n  title = '',\r\n  listCompany = [],\r\n  logoClick,\r\n  titleClick,\r\n  onClick,\r\n  customClass = '',\r\n  isCardCompany = false,\r\n  isEvent = false,\r\n  amountElectricDay = 0,\r\n  amountElectricMonth = 0,\r\n  electricRealtime = 0,\r\n  ratePower = 0,\r\n  cumulativeElectric = 0,\r\n}: Props) => {\r\n  return (\r\n    <div\r\n      className={`card ${customClass}`}\r\n      onClick={onClick}\r\n      role=\"presentation\"\r\n    >\r\n      {isLogoTop && (\r\n        <div className=\"card__company card__company--top\">\r\n          <img\r\n            src={listCompany.logo}\r\n            alt=\"logocompany\"\r\n            className=\"card__company__item\"\r\n          />\r\n        </div>\r\n      )}\r\n      <div className={`card__header ${isEvent ? 'header-event' : ''}`}>\r\n        <p\r\n          className={`card__title ${isEvent ? 'card__event' : ''}`}\r\n          onClick={titleClick}\r\n          role=\"presentation\"\r\n        >\r\n          {title}\r\n        </p>\r\n        {isEvent && (\r\n          <img\r\n            src={IMAGES.icon_event_card}\r\n            alt=\"\"\r\n            className=\"card__logo-event\"\r\n          />\r\n        )}\r\n      </div>\r\n      <div\r\n        className={\r\n          isCardCompany ? 'card__body card__body--company' : 'card__body'\r\n        }\r\n      >\r\n        {/* list item in card */}\r\n        <div className=\"card__list\">\r\n          <CardItem\r\n            name=\"실시간 발전량\"\r\n            specifications={electricRealtime}\r\n            unit=\"kWh\"\r\n          />\r\n          <CardItem name=\"성능비\" specifications={ratePower} unit=\"%\" />\r\n          <CardItem name=\"금일\" specifications={amountElectricDay} unit=\"kWh\" />\r\n          <CardItem\r\n            name=\"금월\"\r\n            specifications={amountElectricMonth}\r\n            unit=\"kWh\"\r\n          />\r\n          <CardItem\r\n            name=\"누적발전량\"\r\n            specifications={cumulativeElectric}\r\n            unit=\"MW\"\r\n          />\r\n        </div>\r\n\r\n        {!isLogoTop && (\r\n          <div className=\"card__company\">\r\n            {/* list company in card */}\r\n            {listCompany.map((item) => (\r\n              <img\r\n                key={item.id}\r\n                // src={IMAGES.default_logo}\r\n                src={item?.com_logo_path?.thumbnail}\r\n                alt=\"logocompany\"\r\n                className=\"card__company__item\"\r\n                onClick={() => logoClick(item?.id)}\r\n                role=\"presentation\"\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCard.defaultProps = {\r\n  title: '',\r\n  listCompany: [],\r\n  isLogoTop: false,\r\n  customClass: '',\r\n  isCardCompany: false,\r\n  isEvent: false,\r\n  amountElectricDay: 0,\r\n  amountElectricMonth: 0,\r\n  electricRealtime: 0,\r\n  ratePower: 0,\r\n  cumulativeElectric: 0,\r\n};\r\n\r\nexport default memo<Props>(Card);\r\n","// @flow\r\nimport React, { memo } from 'react';\r\nimport { formatNumber } from 'helpers';\r\nimport IMAGES from 'themes/images';\r\n\r\ntype Props = {\r\n  radiance?: number,\r\n  temperature?: number,\r\n};\r\n\r\nconst VitualData = ({ radiance = 0, temperature = 0 }: Props) => {\r\n  return (\r\n    <div className=\"vitual-data main-card\">\r\n      <div className=\"vitual-data__header main-card__header\">\r\n        <div className=\"vitual-data__title main-card__title\">기상데이터</div>\r\n      </div>\r\n\r\n      <div className=\"vitual-data__body main-card__body\">\r\n        <div className=\"vitual-data__item\">\r\n          <div className=\"vitual-data__group-name\">\r\n            <p className=\"vitual-data__name\">현재 일사량</p>\r\n            <p className=\"vitual-data__unit\">W/㎡</p>\r\n          </div>\r\n          <div className=\"vitual-data__param\">\r\n            <img src={IMAGES.motion_weather_blue} alt=\"motion\" />\r\n            <p>{formatNumber(radiance)}</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"vitual-data__item\">\r\n          <div className=\"vitual-data__group-name\">\r\n            <p className=\"vitual-data__name\">온도</p>\r\n            <p className=\"vitual-data__unit\">℃</p>\r\n          </div>\r\n          <div className=\"vitual-data__param\">\r\n            {temperature < 0 ? (\r\n              <>\r\n                <img src={IMAGES.motion_weather_blue} alt=\"motion\" />\r\n                <p>{formatNumber(temperature)}</p>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <img src={IMAGES.motion_weather_orange} alt=\"motion\" />\r\n                <p className=\"color-orange\">{formatNumber(temperature)}</p>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nVitualData.defaultProps = {\r\n  radiance: 0,\r\n  temperature: 0,\r\n};\r\n\r\nexport default memo<Props>(VitualData);\r\n","import React from 'react';\r\n\r\nimport {\r\n  Chart,\r\n  Series,\r\n  Label,\r\n  Legend,\r\n  ArgumentAxis,\r\n} from 'devextreme-react/chart';\r\n\r\ntype Props = {\r\n  measure?: [],\r\n};\r\n\r\nconst WeeklyElectric = (measure: Props) => {\r\n  const dataChart = measure?.measure;\r\n\r\n  return (\r\n    <div className=\"weekly-electric main-card\">\r\n      <div className=\"weekly-electric__header main-card__header\">\r\n        <div className=\"weekly-electric__title main-card__title\">\r\n          주간 발전 현황\r\n        </div>\r\n        <div className=\"weekly-electric__unit main-card__unit\">kWh</div>\r\n      </div>\r\n\r\n      <div className=\"weekly-electric__body main-card__body\">\r\n        <p className=\"weekly-electric__sub-unit\">단위(일)</p>\r\n        <Chart id=\"chart\" dataSource={dataChart}>\r\n          <Series argumentField=\"time\" type=\"bar\" />\r\n          <ArgumentAxis>\r\n            <Label wordWrap=\"none\" overlappingBehavior={'none'} />\r\n          </ArgumentAxis>\r\n\r\n          <Legend visible={false} />\r\n        </Chart>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeeklyElectric;\r\n","// @flow\nimport React from 'react';\nimport { formatNumber } from 'helpers';\n\ntype Props = {\n  name?: string,\n  subName?: string,\n  value?: number,\n  unit?: string,\n};\n\nconst InfoRealityItem = ({\n  name = '',\n  subName = '',\n  value = 0,\n  unit = '',\n}: Props) => {\n  return (\n    <div className=\"info-reality__item\">\n      <div className=\"info-reality__group-name\">\n        <p className=\"info-reality__name\">{name}</p>\n        <span className=\"info-reality__sub-name\">{subName}</span>\n      </div>\n      <div className=\"info-reality__group-value\">\n        <p className=\"info-reality__value\">{formatNumber(value)}</p>\n        <span className=\"info-reality__unit\">{unit}</span>\n      </div>\n    </div>\n  );\n};\n\nInfoRealityItem.defaultProps = {\n  name: '',\n  subName: '',\n  value: 0,\n  unit: '',\n};\n\nexport default InfoRealityItem;\n","// @flow\nimport React, { memo } from 'react';\nimport InfoRealityItem from './InfoRealityItem';\n\ntype Props = {\n  outputVoltage?: number,\n  outputCurrent?: number,\n  electricRealtime?: number,\n  ratePower?: number,\n};\n\nconst InfoReality = ({\n  outputVoltage = 0,\n  outputCurrent = 0,\n  electricRealtime = 0,\n  ratePower = 0,\n}: Props) => {\n  return (\n    <div className=\"info-reality main-card\">\n      <div className=\"info-reality__header main-card__header\">\n        <div className=\"info-reality__title main-card__title\">\n          실시간 계측 정보\n        </div>\n      </div>\n\n      <div className=\"info-reality__body main-card__body\">\n        <InfoRealityItem\n          name=\"출력전압\"\n          subName=\"v2\"\n          value={outputVoltage}\n          unit=\"V\"\n        />\n        <InfoRealityItem\n          name=\"출력전류\"\n          subName=\"l2\"\n          value={outputCurrent}\n          unit=\"A\"\n        />\n        <InfoRealityItem\n          name=\"전체 실시간 발전량\"\n          subName=\"p\"\n          value={electricRealtime}\n          unit=\"kW\"\n        />\n        <InfoRealityItem\n          name=\"전체 모듈 성능비\"\n          subName=\"\"\n          value={ratePower}\n          unit=\"%\"\n        />\n      </div>\n    </div>\n  );\n};\n\nInfoReality.defaultProps = {\n  outputVoltage: 0,\n  outputCurrent: 0,\n  electricRealtime: 0,\n  ratePower: 0,\n};\n\nexport default memo<Props>(InfoReality);\n","// @flow\r\nimport React, { memo } from 'react';\r\nimport { formatNumber } from 'helpers';\r\n\r\ntype Props = {\r\n  icon?: any,\r\n  name?: string,\r\n  value?: number,\r\n  customClass?: string,\r\n};\r\n\r\nconst TotalPowerItem = ({\r\n  icon = '',\r\n  name = '',\r\n  value = 0,\r\n  customClass = '',\r\n}: Props) => {\r\n  return (\r\n    <div className={`total-power__item ${customClass}`}>\r\n      <img src={icon} alt=\"\" className=\"total-power__icon\" />\r\n      <p className=\"total-power__item-name\">{name}</p>\r\n      <p className=\"total-power__item-value\">{formatNumber(value)}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nTotalPowerItem.defaultProps = {\r\n  name: '',\r\n  value: 0,\r\n  customClass: '',\r\n  icon: '',\r\n};\r\n\r\nexport default memo<Props>(TotalPowerItem);\r\n","// @flow\nimport React, { memo } from 'react';\nimport images from 'themes/images';\nimport TotalPowerItem from './TotalPowerItem';\n\ntype Props = {\n  amountElectricDay?: number,\n  amountElectricMonth?: number,\n  cumulativeElectric?: number,\n};\n\nexport const TotalPower = ({\n  amountElectricDay = 0,\n  amountElectricMonth = 0,\n  cumulativeElectric = 0,\n}: Props) => {\n  return (\n    <div className=\"total-power main-card\">\n      <div className=\"total-power__header main-card__header\">\n        <div className=\"total-power__title main-card__title\">총 발전 현황</div>\n        <div className=\"total-power__unit main-card__unit\">kWh</div>\n      </div>\n\n      <div className=\"total-power__body \">\n        <TotalPowerItem\n          icon={images.icon_day}\n          name=\"금일 발전량\"\n          value={amountElectricDay}\n          customClass=\"bg-color-day\"\n        />\n        <TotalPowerItem\n          icon={images.icon_month}\n          name=\"금월 발전량\"\n          value={amountElectricMonth}\n          customClass=\"bg-color-month\"\n        />\n        <TotalPowerItem\n          icon={images.icon_plus}\n          name=\"누적 발전량\"\n          value={cumulativeElectric}\n          customClass=\"bg-color-plus\"\n        />\n      </div>\n    </div>\n  );\n};\n\nTotalPower.defaultProps = {\n  amountElectricDay: 0,\n  amountElectricMonth: 0,\n  cumulativeElectric: 0,\n};\n\nexport default memo<Props>(TotalPower);\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { Card } from 'commons/components/Card';\nimport Loading from 'commons/components/Loading';\nimport SelectDropdown from 'commons/components/Select';\nimport ROUTERS from 'constants/routers';\nimport {\n  getListPosition,\n  getCardMeasureArea,\n  setPositionId,\n  setCompanyId,\n  getTotalMetric,\n} from 'modules/main/redux';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport IMAGES from 'themes/images';\nimport InfoReality from '../../InfoReality';\nimport TotalPower from '../../TotalPower';\nimport VitualData from '../../VitualData';\nimport WeeklyElectric from '../../WeeklyElectric';\n\nconst DashboardArea = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const {\n    isLoading,\n    cardMeasureArea,\n    listPositions,\n    positionId,\n    totalMetric,\n  } = useSelector((state) => state?.main);\n  const { data: totalInfo, chart } = totalMetric;\n  const [bgImage, setBgImage] = useState(null);\n  const [positionName, setPositionName] = useState(null);\n  const [optionDropdown, setOptionDropdown] = useState(null);\n\n  const posId = useRef(positionId);\n\n  useEffect(() => {\n    dispatch(getListPosition());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (posId.current) {\n      const positionSelected = listPositions.filter(\n        (item) => item.id === posId.current\n      );\n      setOptionDropdown(positionSelected[0]);\n      // set positionId = 0 to set default dropdown\n      dispatch(setPositionId({ id: 0 }));\n    } else {\n      const indexDefault = listPositions.findIndex((item) =>\n        item?.label.includes('본관 남측')\n      );\n      setOptionDropdown(listPositions[indexDefault]);\n    }\n  }, [listPositions, positionId]);\n\n  // set option dropdown value when listposition != [];\n  useEffect(() => {\n    if (optionDropdown) {\n      dispatch(\n        getCardMeasureArea({ type: 'inverter', pos_id: optionDropdown?.id })\n      );\n      dispatch(getTotalMetric({ pos_id: optionDropdown?.id }));\n      const positionSelected = listPositions.filter(\n        (item) => item?.id === optionDropdown?.id\n      );\n      setBgImage(positionSelected[0]?.pos_map_path?.thumbnail);\n      setPositionName(positionSelected[0]?.label);\n    }\n  }, [optionDropdown]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (optionDropdown) {\n        dispatch(getTotalMetric({ pos_id: optionDropdown?.id }));\n      }\n    }, 10000);\n\n    return () => clearInterval(interval);\n  }, [optionDropdown]);\n\n  const handleLogoClick = (id) => {\n    history.push(ROUTERS.STATUS_COMPANY);\n    dispatch(setCompanyId({ id }));\n  };\n\n  return (\n    <>\n      {isLoading && <Loading />}\n      <div\n        className=\"dashboard-area\"\n        style={{ backgroundImage: `url('${bgImage}')` }}\n      >\n        <SelectDropdown\n          placeholder=\"List Selects\"\n          listItem={listPositions}\n          onChange={(ops) => {\n            setOptionDropdown(ops);\n          }}\n          option={optionDropdown}\n          disabled={false}\n          isSearchable={false}\n          blurInputOnSelect={false}\n          customClass=\"header__select\"\n        />\n\n        <div className=\"current-electric\">\n          <div className=\"current-electric__title\">\n            <img src={IMAGES.icon_title} alt=\"Title\" className=\"icon-title\" />\n            <p className=\"title\">{positionName}</p>\n            <div className=\"line\" />\n          </div>\n          <TotalPower\n            amountElectricDay={totalInfo?.prod_today}\n            amountElectricMonth={totalInfo?.prod_inmonth}\n            cumulativeElectric={totalInfo?.prod_sum}\n          />\n          <WeeklyElectric measure={chart} />\n          <InfoReality\n            outputVoltage={totalInfo?.output_voltage}\n            outputCurrent={totalInfo?.output_current}\n            electricRealtime={totalInfo?.prod_realtime}\n            ratePower={totalInfo?.performance_ratio}\n          />\n          <VitualData\n            radiance={totalInfo?.radiance}\n            temperature={totalInfo?.temperature}\n          />\n        </div>\n        <div className=\"dashboard-area__card\">\n          {cardMeasureArea &&\n            cardMeasureArea?.map((posItem, index) => (\n              <Card\n                key={index}\n                title={posItem?.company?.com_name}\n                listCompany={[posItem?.company]}\n                amountElectricDay={posItem?.card?.prod_today}\n                amountElectricMonth={posItem?.card?.prod_inmonth}\n                electricRealtime={posItem?.card?.prod_realtime}\n                cumulativeElectric={posItem?.card?.prod_sum}\n                ratePower={posItem?.card?.performance_ratio}\n                logoClick={handleLogoClick}\n              />\n            ))}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DashboardArea;\n"],"sourceRoot":""}